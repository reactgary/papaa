#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2015
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          46290
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-11-17"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "DotProduct"
#define MAXFILE_BUILD_DIR  "/home/demo/Desktop/MaxCompiler-Builds/DotProduct_VECTIS_DFE_SIM"
#define MAXFILE_BUILD_DATE  20160720
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 36)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX3424A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "DotProductKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(DotProductKernel, Kernel)
MANAGER_NODE(x, PCIe_From_Host_fwd)
MANAGER_NODE(y, PCIe_From_Host_fwd)
MANAGER_NODE(s, PCIe_To_Host_fwd)
MANAGER_NODE(Stream_9, DualAspectReg)
MANAGER_NODE(Stream_13, StreamPullPushAdapter)
MANAGER_NODE(Stream_11, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(DotProductKernel, x, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(DotProductKernel, y, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(DotProductKernel, s, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(x, x, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(y, y, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(s, s, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_9, input, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_9, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_13, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_13, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_11, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_11, output, OUT, STREAM, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(x, x, DotProductKernel, x, 128)
MANAGER_STREAM(y, y, DotProductKernel, y, 128)
MANAGER_STREAM(DotProductKernel, s, Stream_11, input, 32)
MANAGER_STREAM(Stream_9, output, Stream_13, input, 128)
MANAGER_STREAM(Stream_13, output, s, s, 128)
MANAGER_STREAM(Stream_11, output, Stream_9, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(DotProductKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
MANAGER_NODE_STACK_TRACE(x, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
MANAGER_NODE_STACK_TRACE(y, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
MANAGER_NODE_STACK_TRACE(s, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
MANAGER_NODE_STACK_TRACE(Stream_9, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
MANAGER_NODE_STACK_TRACE(Stream_13, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
MANAGER_NODE_STACK_TRACE(Stream_11, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(DotProductKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(DotProductKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(DotProductKernel, DotProductKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(DotProductKernel, x, 0)
DEBUG_INPUT_BITS(DotProductKernel, y, 1)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(DotProductKernel, s, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(x, PCIePullSourceSyncMax3, "x")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(y, PCIePullSourceSyncMax3, "y")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(DotProductKernel, DotProductKernel, "DotProductKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_11, FifoPushToPullSync, "Stream_11", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_9, DualAspectRegSync, "Stream_9", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_13, PullToPushAdapterSync, "Stream_13")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(s, PCIePushSinkSyncMax3, "s")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 2, 1, 0, 0, 0, 0, 0, 36)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "700d2e67b18154d7401959a33e27c82603cf81f8beb1ac1bc5ac1f25d55aa63b")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DotProductKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DotProductKernel, addDebugRegister, reg_dbg_ctld_done, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DotProductKernel, addDebugRegister, reg_dbg_ctld_empty, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DotProductKernel, addDebugRegister, reg_dbg_ctld_read, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DotProductKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 6, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DotProductKernel, addDebugRegister, reg_dbg_ctld_request, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DotProductKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DotProductKernel, addDebugRegister, reg_dbg_fill_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DotProductKernel, addDebugRegister, reg_dbg_flush_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DotProductKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DotProductKernel, addDebugRegister, reg_dbg_flush_start_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DotProductKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DotProductKernel, addDebugRegister, reg_dbg_full_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DotProductKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DotProductKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DotProductKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(x, STREAM_FROM_HOST, 0)
PCIE_STREAM(y, STREAM_FROM_HOST, 1)
PCIE_STREAM(s, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(DotProductKernel.io_x_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(DotProductKernel.io_y_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(DotProductKernel.io_s_force_disabled, 0x2, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(DotProductKernel.run_cycle_count, 0x3, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(DotProductKernel.current_run_cycle_count, 0x9, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(DotProductKernel.dbg_ctld_almost_empty, 0xf, 1, hwBits(2))
REG(DotProductKernel.dbg_ctld_done, 0x10, 1, hwBits(2))
REG(DotProductKernel.dbg_ctld_empty, 0x11, 1, hwBits(2))
REG(DotProductKernel.dbg_ctld_read, 0x12, 1, hwBits(2))
REG(DotProductKernel.dbg_ctld_read_pipe_dbg, 0x13, 1, hwBits(6))
REG(DotProductKernel.dbg_ctld_request, 0x14, 1, hwBits(2))
REG(DotProductKernel.dbg_done_out, 0x15, 1, hwBits(1))
REG(DotProductKernel.dbg_fill_level, 0x16, 1, hwBits(5))
REG(DotProductKernel.dbg_flush_level, 0x17, 1, hwBits(5))
REG(DotProductKernel.dbg_flush_start, 0x18, 1, hwBits(1))
REG(DotProductKernel.dbg_flush_start_level, 0x19, 1, hwBits(5))
REG(DotProductKernel.dbg_flushing, 0x1a, 1, hwBits(1))
REG(DotProductKernel.dbg_full_level, 0x1b, 1, hwBits(5))
REG(DotProductKernel.dbg_out_stall, 0x1c, 1, hwBits(1))
REG(DotProductKernel.dbg_out_valid, 0x1d, 1, hwBits(1))
REG(DotProductKernel.dbg_stall_vector, 0x1e, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x1f, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x20, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(DotProductKernel.io_x_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(DotProductKernel.io_y_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(DotProductKernel.io_s_force_disabled, 0x2, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(DotProductKernel.run_cycle_count, 0x3, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(DotProductKernel.current_run_cycle_count, 0x9, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(DotProductKernel.dbg_ctld_almost_empty, 0xf, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(DotProductKernel.dbg_ctld_done, 0x10, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(DotProductKernel.dbg_ctld_empty, 0x11, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(DotProductKernel.dbg_ctld_read, 0x12, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(DotProductKernel.dbg_ctld_read_pipe_dbg, 0x13, 1, hwBits(6), HOST_READ_ONLY, false)
REG_V2(DotProductKernel.dbg_ctld_request, 0x14, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(DotProductKernel.dbg_done_out, 0x15, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DotProductKernel.dbg_fill_level, 0x16, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(DotProductKernel.dbg_flush_level, 0x17, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(DotProductKernel.dbg_flush_start, 0x18, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DotProductKernel.dbg_flush_start_level, 0x19, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(DotProductKernel.dbg_flushing, 0x1a, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DotProductKernel.dbg_full_level, 0x1b, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(DotProductKernel.dbg_out_stall, 0x1c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DotProductKernel.dbg_out_valid, 0x1d, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DotProductKernel.dbg_stall_vector, 0x1e, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x1f, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x20, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("700d2e67b18154d7401959a33e27c82603cf81f8beb1ac1bc5ac1f25d55aa63b")
#endif




#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAX3REV, MAX3REVA)
CAPABILITY(MAX3RAM, DDR3_24GB)
CAPABILITY(MAX3FPGA, SXT475_2ES)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME DotProduct
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_DotProduct_H
#define SLIC_DECLARATIONS_DotProduct_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define DotProduct_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_N Interface Parameter "N".
 * \param [in] instream_x The stream should be of size ((param_N * 4) * 4) bytes.
 * \param [in] instream_y The stream should be of size ((param_N * 4) * 4) bytes.
 * \param [out] outstream_s The stream should be of size (param_N * 4) bytes.
 */
void DotProduct(
	int64_t param_N,
	const int32_t *instream_x,
	const int32_t *instream_y,
	int32_t *outstream_s);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_N Interface Parameter "N".
 * \param [in] instream_x The stream should be of size ((param_N * 4) * 4) bytes.
 * \param [in] instream_y The stream should be of size ((param_N * 4) * 4) bytes.
 * \param [out] outstream_s The stream should be of size (param_N * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *DotProduct_nonblock(
	int64_t param_N,
	const int32_t *instream_x,
	const int32_t *instream_y,
	int32_t *outstream_s);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int64_t param_N; /**<  [in] Interface Parameter "N". */
	const int32_t *instream_x; /**<  [in] The stream should be of size ((param_N * 4) * 4) bytes. */
	const int32_t *instream_y; /**<  [in] The stream should be of size ((param_N * 4) * 4) bytes. */
	int32_t *outstream_s; /**<  [out] The stream should be of size (param_N * 4) bytes. */
} DotProduct_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void DotProduct_run(
	max_engine_t *engine,
	DotProduct_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *DotProduct_run_nonblock(
	max_engine_t *engine,
	DotProduct_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void DotProduct_run_group(max_group_t *group, DotProduct_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *DotProduct_run_group_nonblock(max_group_t *group, DotProduct_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void DotProduct_run_array(max_engarray_t *engarray, DotProduct_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *DotProduct_run_array_nonblock(max_engarray_t *engarray, DotProduct_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* DotProduct_convert(max_file_t *maxfile, DotProduct_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* DotProduct_init(void);

/* Error handling functions */
int DotProduct_has_errors(void);
const char* DotProduct_get_errors(void);
void DotProduct_clear_errors(void);
/* Free statically allocated maxfile data */
void DotProduct_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int DotProduct_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int DotProduct_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_DotProduct_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(DotProductKernel, 32, NodeInputMappedReg, "Scalar input (io_s_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:28)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 33, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:28)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 0, NodeInputMappedReg, "Scalar input (io_x_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:20)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:20)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 2, NodeInput, "Input(x)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:20)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 3, NodeSlice, "[31:0]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:20)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 4, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:20)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 11, NodeInputMappedReg, "Scalar input (io_y_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:21)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 12, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:21)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 13, NodeInput, "Input(y)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:21)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 14, NodeSlice, "[31:0]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:21)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 15, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:21)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 23, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:25)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 5, NodeSlice, "[63:32]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:20)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 6, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:20)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 16, NodeSlice, "[63:32]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:21)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 17, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:21)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 25, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:25)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 26, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:25)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 7, NodeSlice, "[95:64]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:20)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 8, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:20)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 18, NodeSlice, "[95:64]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:21)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 19, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:21)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 27, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:25)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 48, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
PHOTON_NODE_DATA(DotProductKernel, 28, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:25)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 9, NodeSlice, "[127:96]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:20)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 10, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:20)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 20, NodeSlice, "[127:96]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:21)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 21, NodeReinterpret, "<{HWOffsetFix:32, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:21)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 29, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:25)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 49, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
PHOTON_NODE_DATA(DotProductKernel, 30, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:25)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 35, NodeOutput, "Output(s)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ndotproduct.DotProductKernel.<init>(DotProductKernel.maxj:28)\ndotproduct.DotProductManager.main(DotProductManager.maxj:18)\n")
PHOTON_NODE_DATA(DotProductKernel, 40, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
PHOTON_NODE_DATA(DotProductKernel, 51, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
PHOTON_NODE_DATA(DotProductKernel, 37, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
PHOTON_NODE_DATA(DotProductKernel, 38, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
PHOTON_NODE_DATA(DotProductKernel, 39, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
PHOTON_NODE_DATA(DotProductKernel, 41, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
PHOTON_NODE_DATA(DotProductKernel, 50, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
PHOTON_NODE_DATA(DotProductKernel, 43, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
PHOTON_NODE_DATA(DotProductKernel, 44, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
PHOTON_NODE_DATA(DotProductKernel, 46, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
PHOTON_NODE_DATA(DotProductKernel, 47, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
PHOTON_NODE_DATA(DotProductKernel, 45, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndotproduct.DotProductManager.main(DotProductManager.maxj:22)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int DotProduct_has_errors(void)
{	return stored_has_error; }
const char* DotProduct_get_errors(void)
{	return stored_error; }
void DotProduct_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char DotProduct_use_simulation[16];
static void DotProduct_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(DotProduct_use_simulation, 16, "DotProdu_%05ld_", pid);
}
static const char *DotProduct_check_use_simulation(void)
{
	DotProduct_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = DotProduct_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int DotProduct_simulation_launch = 0;
int DotProduct_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = DotProduct_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int DotProduct_simulator_stop(void)
{
	const char *use_sim = DotProduct_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void DotProduct_static_init(void) 
{
	stored_maxfile = DotProduct_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = DotProduct_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = DotProduct_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			DotProduct_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void DotProduct_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (DotProduct_simulation_launch == 1) {
		int sim_stat = DotProduct_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		DotProduct_simulation_launch = 0;
	}
}

static int DotProduct_get_pcie_alignment(void)
{
#ifdef DotProduct_PCIE_ALIGNMENT
	return ((DotProduct_PCIE_ALIGNMENT < 1) ? 16 : DotProduct_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int DotProduct_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = DotProduct_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *DotProduct_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = DotProduct_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct DotProduct_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} DotProduct_callback_stream_t;

typedef struct DotProduct_callback_data {
	DotProduct_callback_stream_t stream[3]; 
	int count;
	int max_count;
} DotProduct_callback_data_t;

static void DotProduct_callback_internal(void *cb_data)
{
	DotProduct_callback_data_t *data = (DotProduct_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		DotProduct_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* DotProduct_convert_internal(
	max_file_t *maxfile,
	DotProduct_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	DotProduct_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(DotProduct_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function DotProduct_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 3;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &DotProduct_callback_internal;
	}

	int64_t param_N = interface_actions->param_N;
	
	/* code for scalar DotProductKernel.run_cycle_count */
	uint64_t ticks_DotProductKernel = param_N;
	max_set_ticks(actions, "DotProductKernel", param_N);
	CHECK_ERRORS;
	/* end of code for scalar DotProductKernel.run_cycle_count*/
	
	int64_t tmp_0 = ((param_N * 4) * 4);
	
	/* code for stream x */
	size_t instream_size_x = tmp_0;
	if (instream_size_x > 0) {
		const int32_t *stream_ptr = interface_actions->instream_x;
		if (use_callback && (1 == DotProduct_check_aligned(interface_actions->instream_x))) {
			int32_t *aligned_instream_x = malloc(instream_size_x);
			if (aligned_instream_x == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'x'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_x;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_x;
			(&cb_data->stream[cb_data->count])->size        = instream_size_x;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_x, interface_actions->instream_x, instream_size_x);
			stream_ptr = aligned_instream_x;
		}
		max_queue_input(actions, "x", stream_ptr, instream_size_x);
		CHECK_ERRORS;
	}
	/* end of code for stream x */
	
	int64_t tmp_1 = ((param_N * 4) * 4);
	
	/* code for stream y */
	size_t instream_size_y = tmp_1;
	if (instream_size_y > 0) {
		const int32_t *stream_ptr = interface_actions->instream_y;
		if (use_callback && (1 == DotProduct_check_aligned(interface_actions->instream_y))) {
			int32_t *aligned_instream_y = malloc(instream_size_y);
			if (aligned_instream_y == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'y'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_y;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_y;
			(&cb_data->stream[cb_data->count])->size        = instream_size_y;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_y, interface_actions->instream_y, instream_size_y);
			stream_ptr = aligned_instream_y;
		}
		max_queue_input(actions, "y", stream_ptr, instream_size_y);
		CHECK_ERRORS;
	}
	/* end of code for stream y */
	
	int64_t tmp_2 = (param_N * 4);
	
	/* code for stream s */
	size_t outstream_size_s = tmp_2;
	if (outstream_size_s > 0) {
		int32_t *stream_ptr = interface_actions->outstream_s;
		if (use_callback && (1 == DotProduct_check_aligned(interface_actions->outstream_s))) {
			int32_t *aligned_outstream_s = malloc(outstream_size_s);
			if (aligned_outstream_s == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 's'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_s;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_s;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_s;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_s;
		}
		max_queue_output(actions, "s", stream_ptr, outstream_size_s);
		CHECK_ERRORS;
	}
	/* end of code for stream s */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void DotProduct(
	int64_t param_N,
	const int32_t *instream_x,
	const int32_t *instream_y,
	int32_t *outstream_s)
{
	(void) pthread_once(&slic_bs_is_initialised, DotProduct_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = DotProduct_nonblock(param_N, instream_x, instream_y, outstream_s);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *DotProduct_nonblock(
	int64_t param_N,
	const int32_t *instream_x,
	const int32_t *instream_y,
	int32_t *outstream_s)
{
	DotProduct_actions_t interface_actions;
	interface_actions.param_N = param_N;
	interface_actions.instream_x = instream_x;
	interface_actions.instream_y = instream_y;
	interface_actions.outstream_s = outstream_s;
	(void) pthread_once(&slic_bs_is_initialised, DotProduct_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = DotProduct_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void DotProduct_run(
	max_engine_t *engine,
	DotProduct_actions_t *interface_actions)
{
	max_run_t *run = DotProduct_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *DotProduct_run_nonblock(
	max_engine_t *engine,
	DotProduct_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = DotProduct_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void DotProduct_run_group(max_group_t *group, DotProduct_actions_t *interface_actions)
{
	max_run_t *run = DotProduct_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *DotProduct_run_group_nonblock(max_group_t *group, DotProduct_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = DotProduct_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void DotProduct_run_array(max_engarray_t *engarray, DotProduct_actions_t *interface_actions[])
{
	max_run_t *run = DotProduct_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *DotProduct_run_array_nonblock(max_engarray_t *engarray, DotProduct_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = DotProduct_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* DotProduct_convert(max_file_t *maxfile, DotProduct_actions_t *interface_actions)
{
	return DotProduct_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int64_t, N, param_N)	
SLIC_SET_TICKS(DotProductKernel, param_N)	
SLIC_TEMP_VAR(int64_t tmp_0 = ((param_N * 4) * 4);)	
SLIC_STREAM(x, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_1 = ((param_N * 4) * 4);)	
SLIC_STREAM(y, tmp_1)	
SLIC_TEMP_VAR(int64_t tmp_2 = (param_N * 4);)	
SLIC_STREAM(s, tmp_2)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IkRvdFByb2R1Y3QuaCIgbmFt
ZT0iRG90UHJvZHVjdCI+PGNvbnN0YW50IG5hbWU9IlBDSUVfQUxJR05NRU5UIiB0eXBlPSJsb25n
IiB2YWx1ZT0iMTYiLz48ZW5naW5lbW9kZSBuYW1lPSJkZWZhdWx0Ij48ZnVuY3Rpb24gbmFtZT0i
RG90UHJvZHVjdCIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQ
YXJhbWV0ZXIgJnF1b3Q7TiZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX04i
IHR5cGU9ImludDY0X3QiLz48YXJyYXkgZGVzYz0iVGhlIHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6
ZSAoKHBhcmFtX04gKiA0KSAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5z
dHJlYW1feCIgc2l6ZT0iKChwYXJhbV9OICogNCkgKiA0KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBl
PSJpbnQzMl90Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3RoPjxmdW5jdGlvbkNhbGw+PG51
bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKCgocGFyYW1fTiAqIDQpICogNCkg
LyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9IioiIHZhbHVl
PSIoKHBhcmFtX04gKiA0KSAqIDQpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBv
cGVyYXRvcj0iKiIgdmFsdWU9IihwYXJhbV9OICogNCkiPjx1c2VyUGFyYW0gdmFsdWU9InBhcmFt
X04iLz48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5j
dGlvbkNhbGw+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwv
ZnVuY3Rpb25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRv
cj48L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjxhcnJheSBkZXNj
PSJUaGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplICgocGFyYW1fTiAqIDQpICogNCkgYnl0ZXMu
IiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnN0cmVhbV95IiBzaXplPSIoKHBhcmFtX04gKiA0
KSAqIDQpIiB0cmFuc3Bvc2U9InRydWUiIHR5cGU9ImludDMyX3QiPjxkaW1lbnNpb24gaW5kZXg9
IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8i
IHZhbHVlPSIoKChwYXJhbV9OICogNCkgKiA0KSAvIDQpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5h
cnlPcGVyYXRvciBvcGVyYXRvcj0iKiIgdmFsdWU9IigocGFyYW1fTiAqIDQpICogNCkiPjxmdW5j
dGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0iKHBhcmFtX04g
KiA0KSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFyYW1fTiIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0
Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1
ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PGNvbnN0YW50VmFsdWUg
dmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjwvbGVuZ3RoPjwv
ZGltZW5zaW9uPjwvYXJyYXk+PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNp
emUgKHBhcmFtX04gKiA0KSBieXRlcy4iIGRpcmVjdGlvbj0iT3V0cHV0IiBuYW1lPSJvdXRzdHJl
YW1fcyIgc2l6ZT0iKHBhcmFtX04gKiA0KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJpbnQzMl90
Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3RoPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9w
ZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKChwYXJhbV9OICogNCkgLyA0KSI+PGZ1bmN0aW9u
Q2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9IioiIHZhbHVlPSIocGFyYW1fTiAqIDQp
Ij48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9OIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48
L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0
Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lv
bj48L2FycmF5PjwvZnVuY3Rpb24+PC9lbmdpbmVtb2RlPjwvbWF4ZmlsZT4=
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBEb3RQcm9kdWN0X2hhc19lcnJvcnModm9pZCkKewlyZXR1cm4gc3RvcmVkX2hhc19l
cnJvcjsgfQpjb25zdCBjaGFyKiBEb3RQcm9kdWN0X2dldF9lcnJvcnModm9pZCkKewlyZXR1cm4g
c3RvcmVkX2Vycm9yOyB9CnZvaWQgRG90UHJvZHVjdF9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJl
ZShzdG9yZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3Ig
PSAwOwp9CgpzdGF0aWMgY2hhciBEb3RQcm9kdWN0X3VzZV9zaW11bGF0aW9uWzE2XTsKc3RhdGlj
IHZvaWQgRG90UHJvZHVjdF9kZWZfdXNlX3NpbXVsYXRpb24odm9pZCkKewoJbG9uZyBwaWQgPSAo
KGxvbmcpIGdldHBpZCgpKSAlIDEwMDAwMDsKCXNucHJpbnRmKERvdFByb2R1Y3RfdXNlX3NpbXVs
YXRpb24sIDE2LCAiRG90UHJvZHVfJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMgY29uc3QgY2hhciAq
RG90UHJvZHVjdF9jaGVja191c2Vfc2ltdWxhdGlvbih2b2lkKQp7CglEb3RQcm9kdWN0X2RlZl91
c2Vfc2ltdWxhdGlvbigpOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IG1heF9jb25maWdfZ2V0X3N0
cmluZyhNQVhfQ09ORklHX1VTRV9TSU1VTEFUSU9OKTsKCWlmICh1c2Vfc2ltID09IE5VTEwpIHsK
CQl1c2Vfc2ltID0gRG90UHJvZHVjdF91c2Vfc2ltdWxhdGlvbjsKCQltYXhfY29uZmlnX3NldF9z
dHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxBVElPTiwgdXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNl
X3NpbTsKfQoKc3RhdGljIGludCBEb3RQcm9kdWN0X3NpbXVsYXRpb25fbGF1bmNoID0gMDsKaW50
IERvdFByb2R1Y3Rfc2ltdWxhdG9yX3N0YXJ0KHZvaWQpCnsKCWludCByZXR2YWwgPSAwOwoJY29u
c3QgY2hhciAqdXNlX3NpbSA9IERvdFByb2R1Y3RfY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNo
YXIgYnVmZlsxMDI0XTsKCXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRI
IG1heGNvbXBpbGVyc2ltIC1kIDEgLW4gJXMgLWMgTUFYMzQyNEEgLVMgc2ltdXRpbHMgcmVzdGFy
dCIsIHVzZV9zaW0pOwoJRklMRSAqcGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlw
ZV9mcCA9PSBOVUxMKSB7CgkJc3RybmNhdChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwg
KDEwMjQgLSBzdHJsZW4oYnVmZikpKTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJ
fQoJd2hpbGUgKGZnZXRzKGJ1ZmYsIDEwMjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNv
bW1lbnQgdGhpcyB0byBnZXQgc2ltdWxhdG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50
ZihzdGRlcnIsIGJ1ZmYpOyAqLwoJCWlmIChzdHJzdHIoYnVmZiwgIkVycm9yIikpIHsKCQkJc2V0
X2Vycm9yKGJ1ZmYpOwoJCQlyZXR2YWwgPSAtMTsKCQl9Cgl9CglwY2xvc2UocGlwZV9mcCk7Cgly
ZXR1cm4gcmV0dmFsOwp9CgppbnQgRG90UHJvZHVjdF9zaW11bGF0b3Jfc3RvcCh2b2lkKQp7Cglj
b25zdCBjaGFyICp1c2Vfc2ltID0gRG90UHJvZHVjdF9jaGVja191c2Vfc2ltdWxhdGlvbigpOwoJ
Y2hhciBidWZmWzEwMjRdOwoJc25wcmludGYoYnVmZiwgMTAyNCwgIlBBVEg9c2ltdXRpbHM6JFBB
VEggbWF4Y29tcGlsZXJzaW0gLWQgMSAtbiAlcyAtYyBNQVgzNDI0QSAtUyBzaW11dGlscyBzdG9w
IiwgdXNlX3NpbSk7CglGSUxFICpwaXBlX2ZwID0gcG9wZW4oYnVmZiwgInIiKTsKCWlmIChwaXBl
X2ZwID09IE5VTEwpIHsKCQlzdHJuY2F0KGJ1ZmYsICIgOiBmYWlsZWQgdG8gZXhlY3V0ZS4iLCAo
MTAyNCAtIHN0cmxlbihidWZmKSkpOwoJCXNldF9lcnJvcihidWZmKTsKCQlyZXR1cm4gLTE7Cgl9
Cgl3aGlsZSAoZmdldHMoYnVmZiwgMTAyNCwgcGlwZV9mcCkgIT0gTlVMTCkgewoJCS8qIFVuY29t
bWVudCB0aGlzIHRvIGdldCBzaW11bGF0b3IgY29tbWFuZCBvdXRwdXQgKi8KCQkvKiBmcHJpbnRm
KHN0ZGVyciwgYnVmZik7ICovCgkJOwoJfQoJcGNsb3NlKHBpcGVfZnApOwoJcmV0dXJuIDA7Cn0K
CnN0YXRpYyB2b2lkIERvdFByb2R1Y3Rfc3RhdGljX2luaXQodm9pZCkgCnsKCXN0b3JlZF9tYXhm
aWxlID0gRG90UHJvZHVjdF9pbml0KCk7CglpZiAoc3RvcmVkX21heGZpbGUgPT0gTlVMTCB8fCAh
bWF4X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxM
OwoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FC
T1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gbG9h
ZCBtYXhmaWxlIik7IHJldHVybjsgfQoJfQoJaWYoIW1heF9vayhtYXhfZ2xvYmFsX2Vycm9ycygp
KSkgewoJCXNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKG1heF9nbG9iYWxfZXJy
b3JzKCkpKTsKCQlyZXR1cm47Cgl9CglpZighbWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklH
X1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKQoJCW1heF9lcnJvcnNfbW9kZShzdG9y
ZWRfbWF4ZmlsZS0+ZXJyb3JzLCAwKTsKCXRpbWVfdCB0aW1lb3V0X3ByZXZpb3VzID0gbWF4X2xv
YWRfdGltZW91dChzdG9yZWRfbWF4ZmlsZSwgMzApOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IERv
dFByb2R1Y3RfY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWlmIChtYXhfcGluZ19kYWVtb24oc3Rv
cmVkX21heGZpbGUsIHVzZV9zaW0pID09IDApIHsKCQlpbnQgc2ltX3N0YXQgPSBEb3RQcm9kdWN0
X3NpbXVsYXRvcl9zdGFydCgpOwoJCWlmICgoc2ltX3N0YXQgPT0gMCkgJiYgKG1heF9waW5nX2Rh
ZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMSkpIHsKCQkJRG90UHJvZHVjdF9zaW11
bGF0aW9uX2xhdW5jaCA9IDE7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQW4gZXJy
b3Igb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIHN0YXJ0IHRoZSBzaW11bGF0aW9uIGluZnJhc3Ry
dWN0dXJlIGF1dG9tYXRpY2FsbHkuIik7CgkJCXNldF9lcnJvcigiRXJyb3I6IENoZWNrIHRoYXQg
J3VzZV9zaW11bGF0aW9uPTxzaW11bGF0b3JfbmFtZT4nIGlzIHNldCBjb3JyZWN0bHkgaW4geW91
ciBTTGlDIGNvbmZpZ3VyYXRpb24iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogYW5kIHRoYXQgdGhl
IGFzc29jaWF0ZWQgc2ltdWxhdGVkIHN5c3RlbSBkYWVtb24gaXMgcnVubmluZy4iKTsKCQkJbWF4
X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQkJ
cmV0dXJuOwoJCX0KCX0KCXN0b3JlZF9lbmdpbmUgPSBtYXhfbG9hZChzdG9yZWRfbWF4ZmlsZSwg
IioiKTsKCWlmICghbWF4X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJaWYobWF4X2Nv
bmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1Ip
KSB7CgkJCWZwcmludGYoc3RkZXJyLCAiXG5VbmFibGUgdG8gbG9hZCBlbmdpbmU6IGFib3J0aW5n
IG5vdy5cblxuIik7CgkJCWZmbHVzaChzdGRlcnIpOwoJCQlhYm9ydCgpOwoJCX0gZWxzZSB7CgkJ
CXNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKHN0b3JlZF9tYXhmaWxlLT5lcnJv
cnMpKTsKCQkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxl
ID0gTlVMTDsKCQkJcmV0dXJuOwoJCX0gCgl9IAoJbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4
ZmlsZSwgdGltZW91dF9wcmV2aW91cyk7Cn0Kdm9pZCBEb3RQcm9kdWN0X2ZyZWUodm9pZCkKewoJ
aWYgKHN0b3JlZF9lbmdpbmUgIT0gTlVMTCkgewoJCW1heF91bmxvYWQoc3RvcmVkX2VuZ2luZSk7
CgkJc3RvcmVkX2VuZ2luZSA9IE5VTEw7Cgl9CglpZiAoc3RvcmVkX21heGZpbGUgIT0gTlVMTCkg
ewoJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUpOwoJCXN0b3JlZF9tYXhmaWxlID0gTlVM
TDsKCX0KCWlmIChzdG9yZWRfZXJyb3IgIT0gTlVMTCkgewoJCWZyZWUoc3RvcmVkX2Vycm9yKTsK
CQlzdG9yZWRfZXJyb3IgPSBOVUxMOwoJfQoJaWYgKERvdFByb2R1Y3Rfc2ltdWxhdGlvbl9sYXVu
Y2ggPT0gMSkgewoJCWludCBzaW1fc3RhdCA9IERvdFByb2R1Y3Rfc2ltdWxhdG9yX3N0b3AoKTsK
CQlpZiAoc2ltX3N0YXQgIT0gMCApIHsKCQkJZnByaW50ZihzdGRlcnIsICJFcnJvciBzdG9wcGlu
ZyBzaW11bGF0b3IuIik7CgkJfQoJCURvdFByb2R1Y3Rfc2ltdWxhdGlvbl9sYXVuY2ggPSAwOwoJ
fQp9CgpzdGF0aWMgaW50IERvdFByb2R1Y3RfZ2V0X3BjaWVfYWxpZ25tZW50KHZvaWQpCnsKI2lm
ZGVmIERvdFByb2R1Y3RfUENJRV9BTElHTk1FTlQKCXJldHVybiAoKERvdFByb2R1Y3RfUENJRV9B
TElHTk1FTlQgPCAxKSA/IDE2IDogRG90UHJvZHVjdF9QQ0lFX0FMSUdOTUVOVCk7CiNlbHNlCgly
ZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50IERvdFByb2R1Y3RfY2hlY2tfYWxpZ25lZChj
b25zdCB2b2lkICpkYXRhKQp7Cgl1aW50cHRyX3QgcG9pbnRlciA9ICh1aW50cHRyX3QpIGRhdGE7
CglpbnQgYWxpZ25tZW50ID0gRG90UHJvZHVjdF9nZXRfcGNpZV9hbGlnbm1lbnQoKTsKCXJldHVy
biAocG9pbnRlciAlIGFsaWdubWVudCkgPyAxIDogMDsKfQoKc3RhdGljIHZvaWQgKkRvdFByb2R1
Y3RfbWFsbG9jX2FsaWduZWQoY29uc3Qgc2l6ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBh
bGlnbm1lbnQgPSBEb3RQcm9kdWN0X2dldF9wY2llX2FsaWdubWVudCgpOwoJcG9zaXhfbWVtYWxp
Z24oJnB0ciwgYWxpZ25tZW50LCBzaXplKTsKCXJldHVybiBwdHI7Cn0KCgoKLyotLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEludGVyZmFjZSBkZWZh
dWx0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
Ki8KCgoKI2RlZmluZSBDSEVDS19FUlJPUlNfU1QoU1QsIFJFVCkgaWYoIW1heF9vayhTVC0+ZXJy
b3JzKSkgeyBpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFD
RV9BQk9SVF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIsICIlc1xuIiwgbWF4X2Vycm9yc190
cmFjZShTVC0+ZXJyb3JzKSk7IGFib3J0KCk7IH0gc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJv
cnNfdHJhY2UoU1QtPmVycm9ycykpOyByZXR1cm4gUkVUOyB9IAojZGVmaW5lIENIRUNLX05VTEwo
VkFMVUUsIE1FU1NBR0UsIFJFVCkgaWYoVkFMVUUgPT0gTlVMTCkgeyBpZiAobWF4X2NvbmZpZ19n
ZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7IGZw
cmludGYoc3RkZXJyLCAiJXNcbiVzXG4iLCAoc3RvcmVkX2Vycm9yID09IE5VTEwpID8gIiIgOiBz
dG9yZWRfZXJyb3IsIE1FU1NBR0UpOyBhYm9ydCgpOyB9IHNldF9lcnJvcihNRVNTQUdFKTsgcmV0
dXJuIFJFVDsgfQoKIAp0eXBlZGVmIHN0cnVjdCBEb3RQcm9kdWN0X2NhbGxiYWNrX3N0cmVhbSB7
Cgl1aW50OF90ICp1c2VyX3B0cjsKCXVpbnQ4X3QgKmFsaWduZWRfcHRyOwoJc2l6ZV90ICAgc2l6
ZTsKCWludCAgICAgIGlzX291dHB1dDsKfSBEb3RQcm9kdWN0X2NhbGxiYWNrX3N0cmVhbV90OwoK
dHlwZWRlZiBzdHJ1Y3QgRG90UHJvZHVjdF9jYWxsYmFja19kYXRhIHsKCURvdFByb2R1Y3RfY2Fs
bGJhY2tfc3RyZWFtX3Qgc3RyZWFtWzNdOyAKCWludCBjb3VudDsKCWludCBtYXhfY291bnQ7Cn0g
RG90UHJvZHVjdF9jYWxsYmFja19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBEb3RQcm9kdWN0X2NhbGxi
YWNrX2ludGVybmFsKHZvaWQgKmNiX2RhdGEpCnsKCURvdFByb2R1Y3RfY2FsbGJhY2tfZGF0YV90
ICpkYXRhID0gKERvdFByb2R1Y3RfY2FsbGJhY2tfZGF0YV90KikgY2JfZGF0YTsKCWZvciAoaW50
IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsgaSsrICkgewoJCURvdFByb2R1Y3RfY2FsbGJhY2tf
c3RyZWFtX3QgKnMgPSAmZGF0YS0+c3RyZWFtW2ldOwoJCWlmIChzLT5pc19vdXRwdXQgJiYgKHMt
PnNpemUgPiAwKSkgewoJCQltZW1jcHkocy0+dXNlcl9wdHIsIHMtPmFsaWduZWRfcHRyLCBzLT5z
aXplKTsKCQl9CgkJZnJlZShzLT5hbGlnbmVkX3B0cik7Cgl9CglmcmVlKGRhdGEpOwp9CgpzdGF0
aWMgbWF4X2FjdGlvbnNfdCogRG90UHJvZHVjdF9jb252ZXJ0X2ludGVybmFsKAoJbWF4X2ZpbGVf
dCAqbWF4ZmlsZSwKCURvdFByb2R1Y3RfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucywKCWlu
dCAgaXNfaW50ZXJuYWxfY2FsbCwKCXZvaWQgKCoqY2FsbGJhY2tfZnVuYykodm9pZCopLAoJdm9p
ZCAqKmNhbGxiYWNrX2RhdGEpCnsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9u
c19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsK
CiNkZWZpbmUgQ0hFQ0tfRVJST1JTIGlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRf
ZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShhY3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJu
IE5VTEw7IH0gCgoJRG90UHJvZHVjdF9jYWxsYmFja19kYXRhX3QgKmNiX2RhdGEgPSBOVUxMOwoJ
aW50IHVzZV9jYWxsYmFjayA9IChjYWxsYmFja19mdW5jICE9IE5VTEwpICYmIChjYWxsYmFja19k
YXRhICE9IE5VTEwpOwoJaWYgKHVzZV9jYWxsYmFjaykgewoJCWNiX2RhdGEgPSBtYWxsb2Moc2l6
ZW9mKERvdFByb2R1Y3RfY2FsbGJhY2tfZGF0YV90KSk7CgkJaWYgKGNiX2RhdGEgPT0gTlVMTCkg
ewoJCQlmcHJpbnRmKHN0ZGVyciwgIlVuYWJsZSB0byBhbGxvY2F0ZSBtZW1vcnkgZm9yIHN0cmVh
bSBjYWxsYmFjayBkYXRhIGluIGZ1bmN0aW9uIERvdFByb2R1Y3RfY29udmVydF9pbnRlcm5hbFxu
Iik7CgkJCXJldHVybiBOVUxMOwoJCX0KCQljYl9kYXRhLT5tYXhfY291bnQgPSAzOwoJCWNiX2Rh
dGEtPmNvdW50ICAgICA9IDA7CgkJKmNhbGxiYWNrX2RhdGEgICAgID0gY2JfZGF0YTsKCQkqY2Fs
bGJhY2tfZnVuYyAgICAgPSAmRG90UHJvZHVjdF9jYWxsYmFja19pbnRlcm5hbDsKCX0KCglpbnQ2
NF90IHBhcmFtX04gPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fTjsKCQoJLyogY29kZSBmb3Ig
c2NhbGFyIERvdFByb2R1Y3RLZXJuZWwucnVuX2N5Y2xlX2NvdW50ICovCgl1aW50NjRfdCB0aWNr
c19Eb3RQcm9kdWN0S2VybmVsID0gcGFyYW1fTjsKCW1heF9zZXRfdGlja3MoYWN0aW9ucywgIkRv
dFByb2R1Y3RLZXJuZWwiLCBwYXJhbV9OKTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2Rl
IGZvciBzY2FsYXIgRG90UHJvZHVjdEtlcm5lbC5ydW5fY3ljbGVfY291bnQqLwoJCglpbnQ2NF90
IHRtcF8wID0gKChwYXJhbV9OICogNCkgKiA0KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIHggKi8K
CXNpemVfdCBpbnN0cmVhbV9zaXplX3ggPSB0bXBfMDsKCWlmIChpbnN0cmVhbV9zaXplX3ggPiAw
KSB7CgkJY29uc3QgaW50MzJfdCAqc3RyZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5pbnN0
cmVhbV94OwoJCWlmICh1c2VfY2FsbGJhY2sgJiYgKDEgPT0gRG90UHJvZHVjdF9jaGVja19hbGln
bmVkKGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV94KSkpIHsKCQkJaW50MzJfdCAqYWxpZ25l
ZF9pbnN0cmVhbV94ID0gbWFsbG9jKGluc3RyZWFtX3NpemVfeCk7CgkJCWlmIChhbGlnbmVkX2lu
c3RyZWFtX3ggPT0gTlVMTCkgewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVy
cm9ycywgX19GSUxFX18sIF9fTElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25l
ZCBtZW1vcnkgZm9yIHN0cmVhbSAneCciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNi
X2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90Kikg
aW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3g7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2Rh
dGEtPmNvdW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX2luc3RyZWFtX3g7
CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gaW5z
dHJlYW1fc2l6ZV94OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19v
dXRwdXQgICA9IDA7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCW1lbWNweShhbGlnbmVkX2lu
c3RyZWFtX3gsIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV94LCBpbnN0cmVhbV9zaXplX3gp
OwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9pbnN0cmVhbV94OwoJCX0KCQltYXhfcXVldWVfaW5w
dXQoYWN0aW9ucywgIngiLCBzdHJlYW1fcHRyLCBpbnN0cmVhbV9zaXplX3gpOwoJCUNIRUNLX0VS
Uk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0geCAqLwoJCglpbnQ2NF90IHRtcF8x
ID0gKChwYXJhbV9OICogNCkgKiA0KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIHkgKi8KCXNpemVf
dCBpbnN0cmVhbV9zaXplX3kgPSB0bXBfMTsKCWlmIChpbnN0cmVhbV9zaXplX3kgPiAwKSB7CgkJ
Y29uc3QgaW50MzJfdCAqc3RyZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV95
OwoJCWlmICh1c2VfY2FsbGJhY2sgJiYgKDEgPT0gRG90UHJvZHVjdF9jaGVja19hbGlnbmVkKGlu
dGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV95KSkpIHsKCQkJaW50MzJfdCAqYWxpZ25lZF9pbnN0
cmVhbV95ID0gbWFsbG9jKGluc3RyZWFtX3NpemVfeSk7CgkJCWlmIChhbGlnbmVkX2luc3RyZWFt
X3kgPT0gTlVMTCkgewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9ycywg
X19GSUxFX18sIF9fTElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25lZCBtZW1v
cnkgZm9yIHN0cmVhbSAneSciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEt
PnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJm
YWNlX2FjdGlvbnMtPmluc3RyZWFtX3k7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNv
dW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX2luc3RyZWFtX3k7CgkJCSgm
Y2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gaW5zdHJlYW1f
c2l6ZV95OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQg
ICA9IDA7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCW1lbWNweShhbGlnbmVkX2luc3RyZWFt
X3ksIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV95LCBpbnN0cmVhbV9zaXplX3kpOwoJCQlz
dHJlYW1fcHRyID0gYWxpZ25lZF9pbnN0cmVhbV95OwoJCX0KCQltYXhfcXVldWVfaW5wdXQoYWN0
aW9ucywgInkiLCBzdHJlYW1fcHRyLCBpbnN0cmVhbV9zaXplX3kpOwoJCUNIRUNLX0VSUk9SUzsK
CX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0geSAqLwoJCglpbnQ2NF90IHRtcF8yID0gKHBh
cmFtX04gKiA0KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIHMgKi8KCXNpemVfdCBvdXRzdHJlYW1f
c2l6ZV9zID0gdG1wXzI7CglpZiAob3V0c3RyZWFtX3NpemVfcyA+IDApIHsKCQlpbnQzMl90ICpz
dHJlYW1fcHRyID0gaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV9zOwoJCWlmICh1c2VfY2Fs
bGJhY2sgJiYgKDEgPT0gRG90UHJvZHVjdF9jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25z
LT5vdXRzdHJlYW1fcykpKSB7CgkJCWludDMyX3QgKmFsaWduZWRfb3V0c3RyZWFtX3MgPSBtYWxs
b2Mob3V0c3RyZWFtX3NpemVfcyk7CgkJCWlmIChhbGlnbmVkX291dHN0cmVhbV9zID09IE5VTEwp
IHsKCQkJCW1heF9yZXBvcnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJvcnMsIF9fRklMRV9fLCBf
X0xJTkVfXywgNTI2LCAiRmFpbGVkIHRvIGFsbG9jYXRlIGFsaWduZWQgbWVtb3J5IGZvciBzdHJl
YW0gJ3MnIik7CgkJCQlDSEVDS19FUlJPUlM7CgkJCX0KCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2Jf
ZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIgICAgPSAodWludDhfdCopIGludGVyZmFjZV9hY3Rpb25z
LT5vdXRzdHJlYW1fczsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+YWxp
Z25lZF9wdHIgPSAodWludDhfdCopIGFsaWduZWRfb3V0c3RyZWFtX3M7CgkJCSgmY2JfZGF0YS0+
c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gb3V0c3RyZWFtX3NpemVfczsK
CQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+aXNfb3V0cHV0ICAgPSAxOwoJ
CQljYl9kYXRhLT5jb3VudCArPSAxOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9vdXRzdHJlYW1f
czsKCQl9CgkJbWF4X3F1ZXVlX291dHB1dChhY3Rpb25zLCAicyIsIHN0cmVhbV9wdHIsIG91dHN0
cmVhbV9zaXplX3MpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJl
YW0gcyAqLwoJCglpZiAodXNlX2NhbGxiYWNrICYmIGNiX2RhdGEtPmNvdW50ID09IDApIHsKCQkq
Y2FsbGJhY2tfZGF0YSA9IE5VTEw7CgkJKmNhbGxiYWNrX2Z1bmMgPSBOVUxMOwoJCWZyZWUoY2Jf
ZGF0YSk7Cgl9CglyZXR1cm4gYWN0aW9uczsKI3VuZGVmIENIRUNLX0VSUk9SUwp9Cgp2b2lkIERv
dFByb2R1Y3QoCglpbnQ2NF90IHBhcmFtX04sCgljb25zdCBpbnQzMl90ICppbnN0cmVhbV94LAoJ
Y29uc3QgaW50MzJfdCAqaW5zdHJlYW1feSwKCWludDMyX3QgKm91dHN0cmVhbV9zKQp7Cgkodm9p
ZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxpc2VkLCBEb3RQcm9kdWN0X3N0YXRp
Y19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdhcyBub3QgbG9h
ZGVkIiwgKTsKCW1heF9ydW5fdCAqcnVuID0gRG90UHJvZHVjdF9ub25ibG9jayhwYXJhbV9OLCBp
bnN0cmVhbV94LCBpbnN0cmVhbV95LCBvdXRzdHJlYW1fcyk7CglDSEVDS19OVUxMKHJ1biwgIlVu
YWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKkRv
dFByb2R1Y3Rfbm9uYmxvY2soCglpbnQ2NF90IHBhcmFtX04sCgljb25zdCBpbnQzMl90ICppbnN0
cmVhbV94LAoJY29uc3QgaW50MzJfdCAqaW5zdHJlYW1feSwKCWludDMyX3QgKm91dHN0cmVhbV9z
KQp7CglEb3RQcm9kdWN0X2FjdGlvbnNfdCBpbnRlcmZhY2VfYWN0aW9uczsKCWludGVyZmFjZV9h
Y3Rpb25zLnBhcmFtX04gPSBwYXJhbV9OOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1feCA9
IGluc3RyZWFtX3g7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVhbV95ID0gaW5zdHJlYW1feTsK
CWludGVyZmFjZV9hY3Rpb25zLm91dHN0cmVhbV9zID0gb3V0c3RyZWFtX3M7Cgkodm9pZCkgcHRo
cmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxpc2VkLCBEb3RQcm9kdWN0X3N0YXRpY19pbml0
KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdhcyBub3QgbG9hZGVkIiwg
TlVMTCk7Cgl2b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZvaWQgICpjYl9kYXRhICAg
ICAgICAgPSBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IERvdFByb2R1Y3RfY29udmVy
dF9pbnRlcm5hbChzdG9yZWRfbWF4ZmlsZSwgJmludGVyZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVu
YywgJmNiX2RhdGEpOwoJQ0hFQ0tfTlVMTChhY3Rpb25zLCAiVW5hYmxlIHRvIGJ1aWxkIGFjdGlv
bnMiLCBOVUxMKTsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rp
b25zLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChzdG9yZWRfZW5naW5lLCBOVUxMKTsKCW1heF9y
dW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxv
Y2soc3RvcmVkX2VuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9ydW5fbm9u
YmxvY2tfd2l0aF9jYihzdG9yZWRfZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9kYXRhKTsK
CX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7CglDSEVD
S19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJ
cmV0dXJuIHJ1bjsKfQoKdm9pZCBEb3RQcm9kdWN0X3J1bigKCW1heF9lbmdpbmVfdCAqZW5naW5l
LAoJRG90UHJvZHVjdF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVuX3Qg
KnJ1biA9IERvdFByb2R1Y3RfcnVuX25vbmJsb2NrKGVuZ2luZSwgaW50ZXJmYWNlX2FjdGlvbnMp
OwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQo
cnVuKTsKfQoKbWF4X3J1bl90ICpEb3RQcm9kdWN0X3J1bl9ub25ibG9jaygKCW1heF9lbmdpbmVf
dCAqZW5naW5lLAoJRG90UHJvZHVjdF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7Cglt
YXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2luZV9nZXRfbWF4X2ZpbGUoZW5naW5lKTsgCgl2
b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZvaWQgICpjYl9kYXRhICAgICAgICAgPSBO
VUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IERvdFByb2R1Y3RfY29udmVydF9pbnRlcm5h
bChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgJmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNI
RUNLX05VTEwoYWN0aW9ucywgIlVuYWJsZSB0byBidWlsZCBhY3Rpb25zIiwgTlVMTCk7CgltYXhf
dmFsaWRhdGUoYWN0aW9ucyk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhf
cnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5VTEwpIHsKCQlydW4gPSBtYXhfcnVuX25vbmJs
b2NrKGVuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2tf
d2l0aF9jYihlbmdpbmUsIGFjdGlvbnMsIGNiX2Z1bmMsIGNiX2RhdGEpOwoJfQoJQ0hFQ0tfTlVM
TChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCBOVUxMKTsKCW1heF9hY3Rpb25zX2ZyZWUo
YWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5j
ZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqIFxw
YXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFj
ZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKgogKiBSdW4gdGhlIGFjdGlvbnMgb24gdGhlIGZp
cnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwLgogKi8Kdm9pZCBEb3RQcm9kdWN0X3J1
bl9ncm91cChtYXhfZ3JvdXBfdCAqZ3JvdXAsIERvdFByb2R1Y3RfYWN0aW9uc190ICppbnRlcmZh
Y2VfYWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4gPSBEb3RQcm9kdWN0X3J1bl9ncm91cF9ub25i
bG9jayhncm91cCwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUg
dG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJpZWYgR3Jv
dXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRl
cmZhY2UgJ2RlZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUgdGhlIGFjdGlvbnMgdG8gcnVuIG9u
IHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cCBhbmQgcmV0dXJuIGltbWVk
aWF0ZWx5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gbXVzdCBiZSBjaGVja2VkIHdpdGggOjpt
YXhfd2FpdC4gCiAqIE5vdGUgdGhhdCB1c2Ugb2YgOjptYXhfbm93YWl0IGlzIHByb2hpYml0ZWQg
d2l0aCBub24tYmxvY2tpbmcgcnVubmluZyBvbiBncm91cHM6CiAqIHNlZSB0aGUgOjptYXhfcnVu
X2dyb3VwX25vbmJsb2NrIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgZXhwbGFuYXRpb24uCiAqCiAq
IFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNl
X2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1
dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICov
Cm1heF9ydW5fdCAqRG90UHJvZHVjdF9ydW5fZ3JvdXBfbm9uYmxvY2sobWF4X2dyb3VwX3QgKmdy
b3VwLCBEb3RQcm9kdWN0X2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxl
X3QgKm1heGZpbGUgPSBtYXhfZ3JvdXBfZ2V0X21heF9maWxlKGdyb3VwKTsKCW1heF9hY3Rpb25z
X3QgKmFjdGlvbnMgPSBEb3RQcm9kdWN0X2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJm
YWNlX2FjdGlvbnMsIDEsIE5VTEwsIE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4g
TlVMTDsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgltYXhfdmFs
aWRhdGUoYWN0aW9ucyk7CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5fZ3JvdXBfbm9uYmxvY2so
Z3JvdXAsIGFjdGlvbnMpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47
Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9y
IHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICogXHBhcmFtIFtpbl0gZW5nYXJyYXkgVGhl
IGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0gW2luLG91dF0gaW50ZXJmYWNlX2Fj
dGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKgogKiBSdW4gdGhlIGFycmF5IG9m
IGFjdGlvbnMgb24gdGhlIGFycmF5IG9mIGVuZ2luZXMuICBUaGUgbGVuZ3RoIG9mIGludGVyZmFj
ZV9hY3Rpb25zCiAqIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqLwp2b2lkIERv
dFByb2R1Y3RfcnVuX2FycmF5KG1heF9lbmdhcnJheV90ICplbmdhcnJheSwgRG90UHJvZHVjdF9h
Y3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9ydW5fdCAqcnVuID0gRG90UHJv
ZHVjdF9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGludGVyZmFjZV9hY3Rpb25zKTsKCUNI
RUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7
Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0aWMgbm9uLWJsb2NraW5n
IGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqCiAqIFNjaGVkdWxl
IHRvIHJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcywgYW5k
IHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucyBt
dXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4g
Y2FuIGJlIGNoZWNrZWQgZWl0aGVyIGJ5IDo6bWF4X3dhaXQgb3IgOjptYXhfbm93YWl0OwogKiBu
b3RlIHRoYXQgb25lIG9mIHRoZXNlICptdXN0KiBiZSBjYWxsZWQsIHNvIHRoYXQgYXNzb2NpYXRl
ZCBtZW1vcnkgY2FuIGJlIHJlbGVhc2VkLgogKgogKiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUg
YXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25z
IFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUg
ZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9y
LgogKi8KbWF4X3J1bl90ICpEb3RQcm9kdWN0X3J1bl9hcnJheV9ub25ibG9jayhtYXhfZW5nYXJy
YXlfdCAqZW5nYXJyYXksIERvdFByb2R1Y3RfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9uc1td
KQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2FycmF5X2dldF9tYXhfZmlsZShlbmdh
cnJheSwgMCk7CglpbnQgaTsKCW1heF9hY3RhcnJheV90ICphY3RhcnJheSA9IG1heF9hY3RhcnJh
eV9pbml0KG1heGZpbGUsIGVuZ2FycmF5LT5zaXplKTsKCWlmIChhY3RhcnJheSA9PSBOVUxMKSBy
ZXR1cm4gTlVMTDsKCW1heF9hY3Rpb25zX3QgKiphcnJfYWN0aW9ucyA9IG1hbGxvYyhlbmdhcnJh
eS0+c2l6ZSAqIHNpemVvZihtYXhfYWN0aW9uc190KikpOwoJZm9yICggaSA9IDAgOyBpIDwgYWN0
YXJyYXktPnNpemU7IGkrKyApIHsKCQltYXhfYWN0aW9uc190ICphY3Rpb25zID0gRG90UHJvZHVj
dF9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zW2ldLCAxLCBOVUxM
LCBOVUxMKTsKCQlpZiAoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCQlhcnJfYWN0aW9u
c1tpXSA9IGFjdGlvbnM7CgkJbWF4X3NldF9hY3Rpb24oYWN0YXJyYXksIGksIGFjdGlvbnMpOwoJ
fQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBhY3Rh
cnJheSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZSA7IGkrKyApIHsgbWF4X2Fj
dGlvbnNfZnJlZShhcnJfYWN0aW9uc1tpXSk7IH0KCW1heF9hY3RhcnJheV9mcmVlKGFjdGFycmF5
KTsKCWZyZWUoYXJyX2FjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgQ29u
dmVydHMgYSBzdGF0aWMtaW50ZXJmYWNlIGFjdGlvbiBzdHJ1Y3QgaW50byBhIGR5bmFtaWMtaW50
ZXJmYWNlIG1heF9hY3Rpb25zX3Qgc3RydWN0LgogKgogKiBOb3RlIHRoYXQgdGhpcyBpcyBhbiBp
bnRlcm5hbCB1dGlsaXR5IGZ1bmN0aW9uIHVzZWQgYnkgb3RoZXIgZnVuY3Rpb25zIGluIHRoZSBz
dGF0aWMgaW50ZXJmYWNlLgogKgogKiBccGFyYW0gW2luXSBtYXhmaWxlIFRoZSBtYXhmaWxlIHRv
IHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGludGVyZmFjZS1zcGVj
aWZpYyBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBUaGUgZHluYW1pYy1pbnRlcmZhY2UgYWN0
aW9ucyB0byBydW4sIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9hY3Rpb25zX3Qq
IERvdFByb2R1Y3RfY29udmVydChtYXhfZmlsZV90ICptYXhmaWxlLCBEb3RQcm9kdWN0X2FjdGlv
bnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCXJldHVybiBEb3RQcm9kdWN0X2NvbnZlcnRfaW50
ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDAsIE5VTEwsIE5VTEwpOwp9CgojdW5k
ZWYgQ0hFQ0tfRVJST1JTX1NUCiN1bmRlZiBDSEVDS19OVUxMCgoK
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(DotProductKernel, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 33, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 12, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 16, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 51, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 50, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 44, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DotProductKernel, 45, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c02146ea4901ce94a6d9043072fea5230b467ec4ca1560214781b9a9b7479144531f90eac2a5625fbfc8b5587")
#endif

