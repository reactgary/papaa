#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2015
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          46290
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-11-17"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "Convolution"
#define MAXFILE_BUILD_DIR  "/home/demo/Desktop/MaxCompiler-Builds/Convolution_MAIA_DFE_SIM"
#define MAXFILE_BUILD_DATE  20160721
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 93)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX4848A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "ConvolutionKernel.h"
#endif



#ifdef SET_REG_FROM_EQ_V2
#define SET_REG_FROM_EQ_V2_PRESENT 1
SET_REG_FROM_EQ_V2(ConvolutionKernel, delay_eq_0, (maxfile_max(1, maxfile_min((-2 + GET(ConvolutionKernel, ny)), 4094)) + -1))
SET_REG_FROM_EQ_V2(ConvolutionKernel, ce_delay_eq_0, (132 + GET(ConvolutionKernel, ny)))
SET_REG_FROM_EQ_V2(ConvolutionKernel, ce_delay_eq_1, (128 + GET(ConvolutionKernel, ny)))
SET_REG_FROM_EQ_V2(ConvolutionKernel, ce_delay_eq_2, (128 + GET(ConvolutionKernel, ny)))
SET_REG_FROM_EQ_V2(ConvolutionKernel, ce_delay_eq_3, (132 + GET(ConvolutionKernel, ny)))
#endif

#ifdef ASSERT_EQ_V2
#define ASSERT_EQ_V2_PRESENT 1
ASSERT_EQ_V2(GET(ConvolutionKernel, ny) <= 4096 && GET(ConvolutionKernel, ny) >= 3, "Stream offset param 'ny' must be between 3 and 4096 (inclusive).")
ASSERT_EQ_V2(GET(ConvolutionKernel, ny) <= 4096 && GET(ConvolutionKernel, ny) >= 3, "Stream offset variable out of range ny{3..4096}")
#endif

#ifdef ASSERT_EQ_V3
#define ASSERT_EQ_V3_PRESENT 1
ASSERT_EQ_V3(ConvolutionKernel, GET(ConvolutionKernel, ny) <= 4096 && GET(ConvolutionKernel, ny) >= 3, "Stream offset param 'ny' must be between 3 and 4096 (inclusive).")
ASSERT_EQ_V3(ConvolutionKernel, GET(ConvolutionKernel, ny) <= 4096 && GET(ConvolutionKernel, ny) >= 3, "Stream offset variable out of range ny{3..4096}")
#endif

#ifdef STREAM_VAR
#define STREAM_VAR_PRESENT 1
STREAM_VAR(ConvolutionKernel.ny)
#endif

#ifdef STREAM_PARAM
#define STREAM_PARAM_PRESENT 1
STREAM_PARAM(ConvolutionKernel, ny)
#endif



#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(ConvolutionKernel, Kernel)
MANAGER_NODE(inStream, PCIe_From_Host)
MANAGER_NODE(outStream, PCIe_To_Host)
MANAGER_NODE(Stream_1, DualAspectMux)
MANAGER_NODE(Stream_6, DualAspectReg)
MANAGER_NODE(Stream_14, StreamPullPushAdapter)
MANAGER_NODE(Stream_8, Fifo)
MANAGER_NODE(Stream_10, Fifo)
MANAGER_NODE(Stream_12, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(ConvolutionKernel, inStream, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(ConvolutionKernel, outStream, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(inStream, inStream, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(outStream, outStream, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_6, input, IN, PCIE, 32, PULL)
MANAGER_NODE_IO(Stream_6, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_14, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_14, output, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_8, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_8, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_10, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_10, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_12, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_12, output, OUT, PCIE, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(inStream, inStream, Stream_8, input, 128)
MANAGER_STREAM(ConvolutionKernel, outStream, Stream_12, input, 32)
MANAGER_STREAM(Stream_1, output, Stream_10, input, 32)
MANAGER_STREAM(Stream_6, output, Stream_14, input, 128)
MANAGER_STREAM(Stream_14, output, outStream, outStream, 128)
MANAGER_STREAM(Stream_8, output, Stream_1, input, 128)
MANAGER_STREAM(Stream_10, output, ConvolutionKernel, inStream, 32)
MANAGER_STREAM(Stream_12, output, Stream_6, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(ConvolutionKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(inStream, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(outStream, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_6, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_8, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_10, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_12, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(ConvolutionKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(ConvolutionKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(ConvolutionKernel, ConvolutionKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(ConvolutionKernel, inStream, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(ConvolutionKernel, outStream, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(inStream, PCIePushSourceSyncMax4, "inStream")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_8, FifoPushToPullSync, "Stream_8", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectMuxSync, "Stream_1", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, FifoPushToPullSync, "Stream_10", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ConvolutionKernel, ConvolutionKernel, "ConvolutionKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_12, FifoPushToPullSync, "Stream_12", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_6, DualAspectRegSync, "Stream_6", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, PullToPushAdapterSync, "Stream_14")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(outStream, PCIePushSinkSyncMax3, "outStream")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 93)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "374a4ce67cff106addae9171443e38a62e56aaeec414d6dcaf704929e03dc320")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(ConvolutionKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(ConvolutionKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(ConvolutionKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(ConvolutionKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(ConvolutionKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(ConvolutionKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(ConvolutionKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(ConvolutionKernel, addDebugRegister, reg_dbg_fill_level, 13, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(ConvolutionKernel, addDebugRegister, reg_dbg_flush_level, 13, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(ConvolutionKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(ConvolutionKernel, addDebugRegister, reg_dbg_flush_start_level, 13, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(ConvolutionKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(ConvolutionKernel, addDebugRegister, reg_dbg_full_level, 13, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(ConvolutionKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(ConvolutionKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(ConvolutionKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(inStream, STREAM_FROM_HOST, 0)
PCIE_STREAM(outStream, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(ConvolutionKernel.io_inStream_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(ConvolutionKernel.w1, 0x1, 4, hwFloat(8, 24))
REG(ConvolutionKernel.w2, 0x5, 4, hwFloat(8, 24))
REG(ConvolutionKernel.w3, 0x9, 4, hwFloat(8, 24))
REG(ConvolutionKernel.w4, 0xd, 4, hwFloat(8, 24))
REG(ConvolutionKernel.w5, 0x11, 4, hwFloat(8, 24))
REG(ConvolutionKernel.w6, 0x15, 4, hwFloat(8, 24))
REG(ConvolutionKernel.w7, 0x19, 4, hwFloat(8, 24))
REG(ConvolutionKernel.w8, 0x1d, 4, hwFloat(8, 24))
REG(ConvolutionKernel.w9, 0x21, 4, hwFloat(8, 24))
REG(ConvolutionKernel.height, 0x25, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ConvolutionKernel.width, 0x29, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ConvolutionKernel.io_outStream_force_disabled, 0x2d, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(ConvolutionKernel.run_cycle_count, 0x2e, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(ConvolutionKernel.delay_eq_0, 0x34, 2, hwOffsetFix(12, 0, UNSIGNED))
REG(ConvolutionKernel.ce_delay_eq_0, 0x36, 2, hwOffsetFix(13, 0, UNSIGNED))
REG(ConvolutionKernel.ce_delay_eq_1, 0x38, 2, hwOffsetFix(13, 0, UNSIGNED))
REG(ConvolutionKernel.ce_delay_eq_2, 0x3a, 2, hwOffsetFix(13, 0, UNSIGNED))
REG(ConvolutionKernel.ce_delay_eq_3, 0x3c, 2, hwOffsetFix(13, 0, UNSIGNED))
REG(ConvolutionKernel.current_run_cycle_count, 0x3e, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(ConvolutionKernel.dbg_ctld_almost_empty, 0x44, 1, hwBits(1))
REG(ConvolutionKernel.dbg_ctld_done, 0x45, 1, hwBits(1))
REG(ConvolutionKernel.dbg_ctld_empty, 0x46, 1, hwBits(1))
REG(ConvolutionKernel.dbg_ctld_read, 0x47, 1, hwBits(1))
REG(ConvolutionKernel.dbg_ctld_read_pipe_dbg, 0x48, 1, hwBits(3))
REG(ConvolutionKernel.dbg_ctld_request, 0x49, 1, hwBits(1))
REG(ConvolutionKernel.dbg_done_out, 0x4a, 1, hwBits(1))
REG(ConvolutionKernel.dbg_fill_level, 0x4b, 2, hwBits(13))
REG(ConvolutionKernel.dbg_flush_level, 0x4d, 2, hwBits(13))
REG(ConvolutionKernel.dbg_flush_start, 0x4f, 1, hwBits(1))
REG(ConvolutionKernel.dbg_flush_start_level, 0x50, 2, hwBits(13))
REG(ConvolutionKernel.dbg_flushing, 0x52, 1, hwBits(1))
REG(ConvolutionKernel.dbg_full_level, 0x53, 2, hwBits(13))
REG(ConvolutionKernel.dbg_out_stall, 0x55, 1, hwBits(1))
REG(ConvolutionKernel.dbg_out_valid, 0x56, 1, hwBits(1))
REG(ConvolutionKernel.dbg_stall_vector, 0x57, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x58, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x59, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(ConvolutionKernel.io_inStream_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(ConvolutionKernel.w1, 0x1, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.w2, 0x5, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.w3, 0x9, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.w4, 0xd, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.w5, 0x11, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.w6, 0x15, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.w7, 0x19, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.w8, 0x1d, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.w9, 0x21, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.height, 0x25, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.width, 0x29, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.io_outStream_force_disabled, 0x2d, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(ConvolutionKernel.run_cycle_count, 0x2e, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.delay_eq_0, 0x34, 2, hwOffsetFix(12, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.ce_delay_eq_0, 0x36, 2, hwOffsetFix(13, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.ce_delay_eq_1, 0x38, 2, hwOffsetFix(13, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.ce_delay_eq_2, 0x3a, 2, hwOffsetFix(13, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.ce_delay_eq_3, 0x3c, 2, hwOffsetFix(13, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ConvolutionKernel.current_run_cycle_count, 0x3e, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(ConvolutionKernel.dbg_ctld_almost_empty, 0x44, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ConvolutionKernel.dbg_ctld_done, 0x45, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ConvolutionKernel.dbg_ctld_empty, 0x46, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ConvolutionKernel.dbg_ctld_read, 0x47, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ConvolutionKernel.dbg_ctld_read_pipe_dbg, 0x48, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(ConvolutionKernel.dbg_ctld_request, 0x49, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ConvolutionKernel.dbg_done_out, 0x4a, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ConvolutionKernel.dbg_fill_level, 0x4b, 2, hwBits(13), HOST_READ_ONLY, false)
REG_V2(ConvolutionKernel.dbg_flush_level, 0x4d, 2, hwBits(13), HOST_READ_ONLY, false)
REG_V2(ConvolutionKernel.dbg_flush_start, 0x4f, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ConvolutionKernel.dbg_flush_start_level, 0x50, 2, hwBits(13), HOST_READ_ONLY, false)
REG_V2(ConvolutionKernel.dbg_flushing, 0x52, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ConvolutionKernel.dbg_full_level, 0x53, 2, hwBits(13), HOST_READ_ONLY, false)
REG_V2(ConvolutionKernel.dbg_out_stall, 0x55, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ConvolutionKernel.dbg_out_valid, 0x56, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ConvolutionKernel.dbg_stall_vector, 0x57, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x58, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x59, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("374a4ce67cff106addae9171443e38a62e56aaeec414d6dcaf704929e03dc320")
#endif




#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAIAREV, MAIAREVA)
CAPABILITY(MAIARAM, DDR3_48GB)
CAPABILITY(MAIAFPGA, 5SGSMD8N2F45C2)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME Convolution
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_Convolution_H
#define SLIC_DECLARATIONS_Convolution_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define Convolution_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_height Interface Parameter "height".
 * \param [in] param_width Interface Parameter "width".
 * \param [in] offset_ConvolutionKernel_ny Offset parameter "ny" for kernel "ConvolutionKernel".
 * \param [in] inscalar_ConvolutionKernel_w1 Input scalar parameter "ConvolutionKernel.w1".
 * \param [in] inscalar_ConvolutionKernel_w2 Input scalar parameter "ConvolutionKernel.w2".
 * \param [in] inscalar_ConvolutionKernel_w3 Input scalar parameter "ConvolutionKernel.w3".
 * \param [in] inscalar_ConvolutionKernel_w4 Input scalar parameter "ConvolutionKernel.w4".
 * \param [in] inscalar_ConvolutionKernel_w5 Input scalar parameter "ConvolutionKernel.w5".
 * \param [in] inscalar_ConvolutionKernel_w6 Input scalar parameter "ConvolutionKernel.w6".
 * \param [in] inscalar_ConvolutionKernel_w7 Input scalar parameter "ConvolutionKernel.w7".
 * \param [in] inscalar_ConvolutionKernel_w8 Input scalar parameter "ConvolutionKernel.w8".
 * \param [in] inscalar_ConvolutionKernel_w9 Input scalar parameter "ConvolutionKernel.w9".
 * \param [in] instream_inStream The stream should be of size ((param_width * param_height) * 4) bytes.
 * \param [out] outstream_outStream The stream should be of size (((param_width - 2) * (param_height - 2)) * 4) bytes.
 */
void Convolution(
	int64_t param_height,
	int64_t param_width,
	long offset_ConvolutionKernel_ny,
	double inscalar_ConvolutionKernel_w1,
	double inscalar_ConvolutionKernel_w2,
	double inscalar_ConvolutionKernel_w3,
	double inscalar_ConvolutionKernel_w4,
	double inscalar_ConvolutionKernel_w5,
	double inscalar_ConvolutionKernel_w6,
	double inscalar_ConvolutionKernel_w7,
	double inscalar_ConvolutionKernel_w8,
	double inscalar_ConvolutionKernel_w9,
	const float *instream_inStream,
	float *outstream_outStream);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_height Interface Parameter "height".
 * \param [in] param_width Interface Parameter "width".
 * \param [in] offset_ConvolutionKernel_ny Offset parameter "ny" for kernel "ConvolutionKernel".
 * \param [in] inscalar_ConvolutionKernel_w1 Input scalar parameter "ConvolutionKernel.w1".
 * \param [in] inscalar_ConvolutionKernel_w2 Input scalar parameter "ConvolutionKernel.w2".
 * \param [in] inscalar_ConvolutionKernel_w3 Input scalar parameter "ConvolutionKernel.w3".
 * \param [in] inscalar_ConvolutionKernel_w4 Input scalar parameter "ConvolutionKernel.w4".
 * \param [in] inscalar_ConvolutionKernel_w5 Input scalar parameter "ConvolutionKernel.w5".
 * \param [in] inscalar_ConvolutionKernel_w6 Input scalar parameter "ConvolutionKernel.w6".
 * \param [in] inscalar_ConvolutionKernel_w7 Input scalar parameter "ConvolutionKernel.w7".
 * \param [in] inscalar_ConvolutionKernel_w8 Input scalar parameter "ConvolutionKernel.w8".
 * \param [in] inscalar_ConvolutionKernel_w9 Input scalar parameter "ConvolutionKernel.w9".
 * \param [in] instream_inStream The stream should be of size ((param_width * param_height) * 4) bytes.
 * \param [out] outstream_outStream The stream should be of size (((param_width - 2) * (param_height - 2)) * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *Convolution_nonblock(
	int64_t param_height,
	int64_t param_width,
	long offset_ConvolutionKernel_ny,
	double inscalar_ConvolutionKernel_w1,
	double inscalar_ConvolutionKernel_w2,
	double inscalar_ConvolutionKernel_w3,
	double inscalar_ConvolutionKernel_w4,
	double inscalar_ConvolutionKernel_w5,
	double inscalar_ConvolutionKernel_w6,
	double inscalar_ConvolutionKernel_w7,
	double inscalar_ConvolutionKernel_w8,
	double inscalar_ConvolutionKernel_w9,
	const float *instream_inStream,
	float *outstream_outStream);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int64_t param_height; /**<  [in] Interface Parameter "height". */
	int64_t param_width; /**<  [in] Interface Parameter "width". */
	long offset_ConvolutionKernel_ny; /**<  [in] Offset parameter "ny" for kernel "ConvolutionKernel". */
	double inscalar_ConvolutionKernel_w1; /**<  [in] Input scalar parameter "ConvolutionKernel.w1". */
	double inscalar_ConvolutionKernel_w2; /**<  [in] Input scalar parameter "ConvolutionKernel.w2". */
	double inscalar_ConvolutionKernel_w3; /**<  [in] Input scalar parameter "ConvolutionKernel.w3". */
	double inscalar_ConvolutionKernel_w4; /**<  [in] Input scalar parameter "ConvolutionKernel.w4". */
	double inscalar_ConvolutionKernel_w5; /**<  [in] Input scalar parameter "ConvolutionKernel.w5". */
	double inscalar_ConvolutionKernel_w6; /**<  [in] Input scalar parameter "ConvolutionKernel.w6". */
	double inscalar_ConvolutionKernel_w7; /**<  [in] Input scalar parameter "ConvolutionKernel.w7". */
	double inscalar_ConvolutionKernel_w8; /**<  [in] Input scalar parameter "ConvolutionKernel.w8". */
	double inscalar_ConvolutionKernel_w9; /**<  [in] Input scalar parameter "ConvolutionKernel.w9". */
	const float *instream_inStream; /**<  [in] The stream should be of size ((param_width * param_height) * 4) bytes. */
	float *outstream_outStream; /**<  [out] The stream should be of size (((param_width - 2) * (param_height - 2)) * 4) bytes. */
} Convolution_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void Convolution_run(
	max_engine_t *engine,
	Convolution_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Convolution_run_nonblock(
	max_engine_t *engine,
	Convolution_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Convolution_run_group(max_group_t *group, Convolution_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Convolution_run_group_nonblock(max_group_t *group, Convolution_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Convolution_run_array(max_engarray_t *engarray, Convolution_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Convolution_run_array_nonblock(max_engarray_t *engarray, Convolution_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Convolution_convert(max_file_t *maxfile, Convolution_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* Convolution_init(void);

/* Error handling functions */
int Convolution_has_errors(void);
const char* Convolution_get_errors(void);
void Convolution_clear_errors(void);
/* Free statically allocated maxfile data */
void Convolution_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int Convolution_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int Convolution_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_Convolution_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(ConvolutionKernel, 14, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounterChain(Count.java:498)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:31)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 12, NodeInputMappedReg, "Scalar input (height)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:28)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 16, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:526)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:33)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 13, NodeInputMappedReg, "Scalar input (width)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:29)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 15, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:526)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:32)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 100, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:597)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:50)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 46, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:597)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:50)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 99, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:937)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:50)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 48, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:937)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:50)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 49, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:50)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 50, NodeOr, "|", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.or(DFEVar.java:418)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:50)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 98, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:597)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:50)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 52, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:597)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:50)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 79, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 53, NodeOr, "|", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.or(DFEVar.java:418)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:50)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 97, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:937)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:50)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 55, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:937)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:50)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 56, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:50)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 80, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 57, NodeOr, "|", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.or(DFEVar.java:418)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:50)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 58, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.complement(DFEVar.java:1060)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:50)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 59, NodeInputMappedReg, "Scalar input (io_outStream_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:51)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 60, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:51)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 61, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:51)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 0, NodeInputMappedReg, "Scalar input (io_inStream_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:14)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:14)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 2, NodeInput, "Input(inStream)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:14)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 101, NodeInputMappedReg, "Scalar input (delay_eq_0)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 75, NodeFIFO, "FIFO(ny{3..4096})", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 81, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 17, NodeStreamOffset, "stream offset: -1 - ny{3..4096}", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:39)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 3, NodeInputMappedReg, "Scalar input (w1)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:16)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 18, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:40)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 19, NodeStreamOffset, "stream offset: -ny{3..4096}", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:39)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 4, NodeInputMappedReg, "Scalar input (w2)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:17)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 20, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:40)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 37, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:48)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 21, NodeStreamOffset, "stream offset: 1 - ny{3..4096}", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:39)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 5, NodeInputMappedReg, "Scalar input (w3)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:18)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 22, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:40)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 83, NodeFIFO, "FIFO(12)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 38, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:48)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 84, NodeFIFO, "FIFO(29)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 23, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:39)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 6, NodeInputMappedReg, "Scalar input (w4)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:19)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 24, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:40)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 39, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:48)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 91, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 25, NodeStreamOffset, "stream offset: ", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:39)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 7, NodeInputMappedReg, "Scalar input (w5)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:20)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 26, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:40)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 40, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:48)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 92, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 27, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:39)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 8, NodeInputMappedReg, "Scalar input (w6)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:21)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 28, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:40)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 41, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:48)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 78, NodeFIFO, "FIFO(ny{3..4096})", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 93, NodeFIFO, "FIFO(16)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 29, NodeStreamOffset, "stream offset: ny{3..4096} - 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:39)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 9, NodeInputMappedReg, "Scalar input (w7)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:22)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 30, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:40)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 42, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:48)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 94, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 31, NodeStreamOffset, "stream offset: ny{3..4096}", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:39)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 10, NodeInputMappedReg, "Scalar input (w8)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:23)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 32, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:40)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 43, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:48)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 33, NodeStreamOffset, "stream offset: 1 + ny{3..4096}", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:247)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:39)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 11, NodeInputMappedReg, "Scalar input (w9)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:24)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 34, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:40)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 90, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 44, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:48)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 62, NodeOutput, "Output(outStream)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\nconvolution.ConvolutionKernel.<init>(ConvolutionKernel.maxj:51)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:16)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 67, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 96, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 64, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 65, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 66, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 68, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 95, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 70, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 71, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 73, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 74, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
PHOTON_NODE_DATA(ConvolutionKernel, 72, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nconvolution.ConvolutionManager.main(ConvolutionManager.maxj:19)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int Convolution_has_errors(void)
{	return stored_has_error; }
const char* Convolution_get_errors(void)
{	return stored_error; }
void Convolution_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char Convolution_use_simulation[16];
static void Convolution_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(Convolution_use_simulation, 16, "Convolut_%05ld_", pid);
}
static const char *Convolution_check_use_simulation(void)
{
	Convolution_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = Convolution_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int Convolution_simulation_launch = 0;
int Convolution_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = Convolution_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int Convolution_simulator_stop(void)
{
	const char *use_sim = Convolution_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void Convolution_static_init(void) 
{
	stored_maxfile = Convolution_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = Convolution_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = Convolution_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			Convolution_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void Convolution_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (Convolution_simulation_launch == 1) {
		int sim_stat = Convolution_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		Convolution_simulation_launch = 0;
	}
}

static int Convolution_get_pcie_alignment(void)
{
#ifdef Convolution_PCIE_ALIGNMENT
	return ((Convolution_PCIE_ALIGNMENT < 1) ? 16 : Convolution_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int Convolution_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = Convolution_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *Convolution_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = Convolution_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct Convolution_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} Convolution_callback_stream_t;

typedef struct Convolution_callback_data {
	Convolution_callback_stream_t stream[2]; 
	int count;
	int max_count;
} Convolution_callback_data_t;

static void Convolution_callback_internal(void *cb_data)
{
	Convolution_callback_data_t *data = (Convolution_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		Convolution_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* Convolution_convert_internal(
	max_file_t *maxfile,
	Convolution_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	Convolution_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(Convolution_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function Convolution_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &Convolution_callback_internal;
	}

	/* code for offset ConvolutionKernel_ny*/
	long offset_ConvolutionKernel_ny = interface_actions->offset_ConvolutionKernel_ny;
	max_set_offset(actions, "ConvolutionKernel", "ny", offset_ConvolutionKernel_ny);
	CHECK_ERRORS;
	/* end of code for offset offset_ConvolutionKernel_ny*/
	
	int64_t param_height = interface_actions->param_height;
	
	int64_t param_width = interface_actions->param_width;
	
	int64_t tmp_0 = (param_width * param_height);
	
	/* code for scalar ConvolutionKernel.run_cycle_count */
	uint64_t ticks_ConvolutionKernel = tmp_0;
	max_set_ticks(actions, "ConvolutionKernel", tmp_0);
	CHECK_ERRORS;
	/* end of code for scalar ConvolutionKernel.run_cycle_count*/
	
	/* code for scalar ConvolutionKernel.height */
	uint64_t inscalar_ConvolutionKernel_height = param_height;
	max_set_uint64t(actions, "ConvolutionKernel", "height", inscalar_ConvolutionKernel_height);
	CHECK_ERRORS;
	/* end of code for scalar ConvolutionKernel.height*/
	
	/* code for scalar ConvolutionKernel.w1 */
	double inscalar_ConvolutionKernel_w1 = interface_actions->inscalar_ConvolutionKernel_w1;
	max_set_double(actions, "ConvolutionKernel", "w1", inscalar_ConvolutionKernel_w1);
	CHECK_ERRORS;
	/* end of code for scalar ConvolutionKernel.w1*/
	
	/* code for scalar ConvolutionKernel.w2 */
	double inscalar_ConvolutionKernel_w2 = interface_actions->inscalar_ConvolutionKernel_w2;
	max_set_double(actions, "ConvolutionKernel", "w2", inscalar_ConvolutionKernel_w2);
	CHECK_ERRORS;
	/* end of code for scalar ConvolutionKernel.w2*/
	
	/* code for scalar ConvolutionKernel.w3 */
	double inscalar_ConvolutionKernel_w3 = interface_actions->inscalar_ConvolutionKernel_w3;
	max_set_double(actions, "ConvolutionKernel", "w3", inscalar_ConvolutionKernel_w3);
	CHECK_ERRORS;
	/* end of code for scalar ConvolutionKernel.w3*/
	
	/* code for scalar ConvolutionKernel.w4 */
	double inscalar_ConvolutionKernel_w4 = interface_actions->inscalar_ConvolutionKernel_w4;
	max_set_double(actions, "ConvolutionKernel", "w4", inscalar_ConvolutionKernel_w4);
	CHECK_ERRORS;
	/* end of code for scalar ConvolutionKernel.w4*/
	
	/* code for scalar ConvolutionKernel.w5 */
	double inscalar_ConvolutionKernel_w5 = interface_actions->inscalar_ConvolutionKernel_w5;
	max_set_double(actions, "ConvolutionKernel", "w5", inscalar_ConvolutionKernel_w5);
	CHECK_ERRORS;
	/* end of code for scalar ConvolutionKernel.w5*/
	
	/* code for scalar ConvolutionKernel.w6 */
	double inscalar_ConvolutionKernel_w6 = interface_actions->inscalar_ConvolutionKernel_w6;
	max_set_double(actions, "ConvolutionKernel", "w6", inscalar_ConvolutionKernel_w6);
	CHECK_ERRORS;
	/* end of code for scalar ConvolutionKernel.w6*/
	
	/* code for scalar ConvolutionKernel.w7 */
	double inscalar_ConvolutionKernel_w7 = interface_actions->inscalar_ConvolutionKernel_w7;
	max_set_double(actions, "ConvolutionKernel", "w7", inscalar_ConvolutionKernel_w7);
	CHECK_ERRORS;
	/* end of code for scalar ConvolutionKernel.w7*/
	
	/* code for scalar ConvolutionKernel.w8 */
	double inscalar_ConvolutionKernel_w8 = interface_actions->inscalar_ConvolutionKernel_w8;
	max_set_double(actions, "ConvolutionKernel", "w8", inscalar_ConvolutionKernel_w8);
	CHECK_ERRORS;
	/* end of code for scalar ConvolutionKernel.w8*/
	
	/* code for scalar ConvolutionKernel.w9 */
	double inscalar_ConvolutionKernel_w9 = interface_actions->inscalar_ConvolutionKernel_w9;
	max_set_double(actions, "ConvolutionKernel", "w9", inscalar_ConvolutionKernel_w9);
	CHECK_ERRORS;
	/* end of code for scalar ConvolutionKernel.w9*/
	
	/* code for scalar ConvolutionKernel.width */
	uint64_t inscalar_ConvolutionKernel_width = param_width;
	max_set_uint64t(actions, "ConvolutionKernel", "width", inscalar_ConvolutionKernel_width);
	CHECK_ERRORS;
	/* end of code for scalar ConvolutionKernel.width*/
	
	int64_t tmp_1 = (tmp_0 * 4);
	
	/* code for stream inStream */
	size_t instream_size_inStream = tmp_1;
	if (instream_size_inStream > 0) {
		const float *stream_ptr = interface_actions->instream_inStream;
		if (use_callback && (1 == Convolution_check_aligned(interface_actions->instream_inStream))) {
			float *aligned_instream_inStream = malloc(instream_size_inStream);
			if (aligned_instream_inStream == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'inStream'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_inStream;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_inStream;
			(&cb_data->stream[cb_data->count])->size        = instream_size_inStream;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_inStream, interface_actions->instream_inStream, instream_size_inStream);
			stream_ptr = aligned_instream_inStream;
		}
		max_queue_input(actions, "inStream", stream_ptr, instream_size_inStream);
		CHECK_ERRORS;
	}
	/* end of code for stream inStream */
	
	int64_t tmp_2 = (((param_width - 2) * (param_height - 2)) * 4);
	
	/* code for stream outStream */
	size_t outstream_size_outStream = tmp_2;
	if (outstream_size_outStream > 0) {
		float *stream_ptr = interface_actions->outstream_outStream;
		if (use_callback && (1 == Convolution_check_aligned(interface_actions->outstream_outStream))) {
			float *aligned_outstream_outStream = malloc(outstream_size_outStream);
			if (aligned_outstream_outStream == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'outStream'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_outStream;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_outStream;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_outStream;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_outStream;
		}
		max_queue_output(actions, "outStream", stream_ptr, outstream_size_outStream);
		CHECK_ERRORS;
	}
	/* end of code for stream outStream */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void Convolution(
	int64_t param_height,
	int64_t param_width,
	long offset_ConvolutionKernel_ny,
	double inscalar_ConvolutionKernel_w1,
	double inscalar_ConvolutionKernel_w2,
	double inscalar_ConvolutionKernel_w3,
	double inscalar_ConvolutionKernel_w4,
	double inscalar_ConvolutionKernel_w5,
	double inscalar_ConvolutionKernel_w6,
	double inscalar_ConvolutionKernel_w7,
	double inscalar_ConvolutionKernel_w8,
	double inscalar_ConvolutionKernel_w9,
	const float *instream_inStream,
	float *outstream_outStream)
{
	(void) pthread_once(&slic_bs_is_initialised, Convolution_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = Convolution_nonblock(param_height, param_width, offset_ConvolutionKernel_ny, inscalar_ConvolutionKernel_w1, inscalar_ConvolutionKernel_w2, inscalar_ConvolutionKernel_w3, inscalar_ConvolutionKernel_w4, inscalar_ConvolutionKernel_w5, inscalar_ConvolutionKernel_w6, inscalar_ConvolutionKernel_w7, inscalar_ConvolutionKernel_w8, inscalar_ConvolutionKernel_w9, instream_inStream, outstream_outStream);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Convolution_nonblock(
	int64_t param_height,
	int64_t param_width,
	long offset_ConvolutionKernel_ny,
	double inscalar_ConvolutionKernel_w1,
	double inscalar_ConvolutionKernel_w2,
	double inscalar_ConvolutionKernel_w3,
	double inscalar_ConvolutionKernel_w4,
	double inscalar_ConvolutionKernel_w5,
	double inscalar_ConvolutionKernel_w6,
	double inscalar_ConvolutionKernel_w7,
	double inscalar_ConvolutionKernel_w8,
	double inscalar_ConvolutionKernel_w9,
	const float *instream_inStream,
	float *outstream_outStream)
{
	Convolution_actions_t interface_actions;
	interface_actions.param_height = param_height;
	interface_actions.param_width = param_width;
	interface_actions.offset_ConvolutionKernel_ny = offset_ConvolutionKernel_ny;
	interface_actions.inscalar_ConvolutionKernel_w1 = inscalar_ConvolutionKernel_w1;
	interface_actions.inscalar_ConvolutionKernel_w2 = inscalar_ConvolutionKernel_w2;
	interface_actions.inscalar_ConvolutionKernel_w3 = inscalar_ConvolutionKernel_w3;
	interface_actions.inscalar_ConvolutionKernel_w4 = inscalar_ConvolutionKernel_w4;
	interface_actions.inscalar_ConvolutionKernel_w5 = inscalar_ConvolutionKernel_w5;
	interface_actions.inscalar_ConvolutionKernel_w6 = inscalar_ConvolutionKernel_w6;
	interface_actions.inscalar_ConvolutionKernel_w7 = inscalar_ConvolutionKernel_w7;
	interface_actions.inscalar_ConvolutionKernel_w8 = inscalar_ConvolutionKernel_w8;
	interface_actions.inscalar_ConvolutionKernel_w9 = inscalar_ConvolutionKernel_w9;
	interface_actions.instream_inStream = instream_inStream;
	interface_actions.outstream_outStream = outstream_outStream;
	(void) pthread_once(&slic_bs_is_initialised, Convolution_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Convolution_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void Convolution_run(
	max_engine_t *engine,
	Convolution_actions_t *interface_actions)
{
	max_run_t *run = Convolution_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Convolution_run_nonblock(
	max_engine_t *engine,
	Convolution_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Convolution_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Convolution_run_group(max_group_t *group, Convolution_actions_t *interface_actions)
{
	max_run_t *run = Convolution_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Convolution_run_group_nonblock(max_group_t *group, Convolution_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = Convolution_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Convolution_run_array(max_engarray_t *engarray, Convolution_actions_t *interface_actions[])
{
	max_run_t *run = Convolution_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Convolution_run_array_nonblock(max_engarray_t *engarray, Convolution_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = Convolution_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Convolution_convert(max_file_t *maxfile, Convolution_actions_t *interface_actions)
{
	return Convolution_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int64_t, height, param_height)	
SLIC_PARAMETER_UINT64(int64_t, width, param_width)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_width * param_height);)	
SLIC_SET_TICKS(ConvolutionKernel, tmp_0)	
SLIC_SCALAR_UINT64(ConvolutionKernel, height, param_height)	
SLIC_SCALAR_UINT64(ConvolutionKernel, width, param_width)	
SLIC_TEMP_VAR(int64_t tmp_1 = (tmp_0 * 4);)	
SLIC_STREAM(inStream, tmp_1)	
SLIC_TEMP_VAR(int64_t tmp_2 = (((param_width - 2) * (param_height - 2)) * 4);)	
SLIC_STREAM(outStream, tmp_2)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IkNvbnZvbHV0aW9uLmgiIG5h
bWU9IkNvbnZvbHV0aW9uIj48Y29uc3RhbnQgbmFtZT0iUENJRV9BTElHTk1FTlQiIHR5cGU9Imxv
bmciIHZhbHVlPSIxNiIvPjxlbmdpbmVtb2RlIG5hbWU9ImRlZmF1bHQiPjxmdW5jdGlvbiBuYW1l
PSJDb252b2x1dGlvbiIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFj
ZSBQYXJhbWV0ZXIgJnF1b3Q7aGVpZ2h0JnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0i
cGFyYW1faGVpZ2h0IiB0eXBlPSJpbnQ2NF90Ii8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2UgUGFy
YW1ldGVyICZxdW90O3dpZHRoJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1f
d2lkdGgiIHR5cGU9ImludDY0X3QiLz48c2NhbGFyIGRlc2M9Ik9mZnNldCBwYXJhbWV0ZXIgJnF1
b3Q7bnkmcXVvdDsgZm9yIGtlcm5lbCAmcXVvdDtDb252b2x1dGlvbktlcm5lbCZxdW90Oy4iIGRp
cmVjdGlvbj0iSW5wdXQiIG5hbWU9Im9mZnNldF9Db252b2x1dGlvbktlcm5lbF9ueSIgdHlwZT0i
dWludDY0X3QiLz48c2NhbGFyIGRlc2M9IklucHV0IHNjYWxhciBwYXJhbWV0ZXIgJnF1b3Q7Q29u
dm9sdXRpb25LZXJuZWwudzEmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnNjYWxh
cl9Db252b2x1dGlvbktlcm5lbF93MSIgdHlwZT0iZG91YmxlIi8+PHNjYWxhciBkZXNjPSJJbnB1
dCBzY2FsYXIgcGFyYW1ldGVyICZxdW90O0NvbnZvbHV0aW9uS2VybmVsLncyJnF1b3Q7LiIgZGly
ZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zY2FsYXJfQ29udm9sdXRpb25LZXJuZWxfdzIiIHR5cGU9
ImRvdWJsZSIvPjxzY2FsYXIgZGVzYz0iSW5wdXQgc2NhbGFyIHBhcmFtZXRlciAmcXVvdDtDb252
b2x1dGlvbktlcm5lbC53MyZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc2NhbGFy
X0NvbnZvbHV0aW9uS2VybmVsX3czIiB0eXBlPSJkb3VibGUiLz48c2NhbGFyIGRlc2M9IklucHV0
IHNjYWxhciBwYXJhbWV0ZXIgJnF1b3Q7Q29udm9sdXRpb25LZXJuZWwudzQmcXVvdDsuIiBkaXJl
Y3Rpb249IklucHV0IiBuYW1lPSJpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93NCIgdHlwZT0i
ZG91YmxlIi8+PHNjYWxhciBkZXNjPSJJbnB1dCBzY2FsYXIgcGFyYW1ldGVyICZxdW90O0NvbnZv
bHV0aW9uS2VybmVsLnc1JnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zY2FsYXJf
Q29udm9sdXRpb25LZXJuZWxfdzUiIHR5cGU9ImRvdWJsZSIvPjxzY2FsYXIgZGVzYz0iSW5wdXQg
c2NhbGFyIHBhcmFtZXRlciAmcXVvdDtDb252b2x1dGlvbktlcm5lbC53NiZxdW90Oy4iIGRpcmVj
dGlvbj0iSW5wdXQiIG5hbWU9Imluc2NhbGFyX0NvbnZvbHV0aW9uS2VybmVsX3c2IiB0eXBlPSJk
b3VibGUiLz48c2NhbGFyIGRlc2M9IklucHV0IHNjYWxhciBwYXJhbWV0ZXIgJnF1b3Q7Q29udm9s
dXRpb25LZXJuZWwudzcmcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnNjYWxhcl9D
b252b2x1dGlvbktlcm5lbF93NyIgdHlwZT0iZG91YmxlIi8+PHNjYWxhciBkZXNjPSJJbnB1dCBz
Y2FsYXIgcGFyYW1ldGVyICZxdW90O0NvbnZvbHV0aW9uS2VybmVsLnc4JnF1b3Q7LiIgZGlyZWN0
aW9uPSJJbnB1dCIgbmFtZT0iaW5zY2FsYXJfQ29udm9sdXRpb25LZXJuZWxfdzgiIHR5cGU9ImRv
dWJsZSIvPjxzY2FsYXIgZGVzYz0iSW5wdXQgc2NhbGFyIHBhcmFtZXRlciAmcXVvdDtDb252b2x1
dGlvbktlcm5lbC53OSZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc2NhbGFyX0Nv
bnZvbHV0aW9uS2VybmVsX3c5IiB0eXBlPSJkb3VibGUiLz48YXJyYXkgZGVzYz0iVGhlIHN0cmVh
bSBzaG91bGQgYmUgb2Ygc2l6ZSAoKHBhcmFtX3dpZHRoICogcGFyYW1faGVpZ2h0KSAqIDQpIGJ5
dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1faW5TdHJlYW0iIHNpemU9Iigo
cGFyYW1fd2lkdGggKiBwYXJhbV9oZWlnaHQpICogNCkiIHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0i
ZmxvYXQiPjxkaW1lbnNpb24gaW5kZXg9IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmlu
YXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8iIHZhbHVlPSIoKChwYXJhbV93aWR0aCAqIHBhcmFtX2hl
aWdodCkgKiA0KSAvIDQpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRv
cj0iKiIgdmFsdWU9IigocGFyYW1fd2lkdGggKiBwYXJhbV9oZWlnaHQpICogNCkiPjxmdW5jdGlv
bkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0iKHBhcmFtX3dpZHRo
ICogcGFyYW1faGVpZ2h0KSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFyYW1fd2lkdGgiLz48dXNlclBh
cmFtIHZhbHVlPSJwYXJhbV9oZWlnaHQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25D
YWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0
aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9m
dW5jdGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNpb24+PC9hcnJheT48YXJyYXkgZGVzYz0iVGhl
IHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAoKChwYXJhbV93aWR0aCAtIDIpICogKHBhcmFtX2hl
aWdodCAtIDIpKSAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9uPSJPdXRwdXQiIG5hbWU9Im91dHN0cmVh
bV9vdXRTdHJlYW0iIHNpemU9IigoKHBhcmFtX3dpZHRoIC0gMikgKiAocGFyYW1faGVpZ2h0IC0g
MikpICogNCkiIHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0iZmxvYXQiPjxkaW1lbnNpb24gaW5kZXg9
IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8i
IHZhbHVlPSIoKCgocGFyYW1fd2lkdGggLSAyKSAqIChwYXJhbV9oZWlnaHQgLSAyKSkgKiA0KSAv
IDQpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iKiIgdmFsdWU9
IigoKHBhcmFtX3dpZHRoIC0gMikgKiAocGFyYW1faGVpZ2h0IC0gMikpICogNCkiPjxmdW5jdGlv
bkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0iKChwYXJhbV93aWR0
aCAtIDIpICogKHBhcmFtX2hlaWdodCAtIDIpKSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3Bl
cmF0b3Igb3BlcmF0b3I9Ii0iIHZhbHVlPSIocGFyYW1fd2lkdGggLSAyKSI+PHVzZXJQYXJhbSB2
YWx1ZT0icGFyYW1fd2lkdGgiLz48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iMiIvPjwvbnVtQmluYXJ5
T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Ig
b3BlcmF0b3I9Ii0iIHZhbHVlPSIocGFyYW1faGVpZ2h0IC0gMikiPjx1c2VyUGFyYW0gdmFsdWU9
InBhcmFtX2hlaWdodCIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSIyIi8+PC9udW1CaW5hcnlPcGVy
YXRvcj48L2Z1bmN0aW9uQ2FsbD48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjxj
b25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2Fs
bD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlv
bkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNpb24+PC9hcnJheT48L2Z1bmN0aW9uPjwvZW5naW5lbW9k
ZT48L21heGZpbGU+
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBDb252b2x1dGlvbl9oYXNfZXJyb3JzKHZvaWQpCnsJcmV0dXJuIHN0b3JlZF9oYXNf
ZXJyb3I7IH0KY29uc3QgY2hhciogQ29udm9sdXRpb25fZ2V0X2Vycm9ycyh2b2lkKQp7CXJldHVy
biBzdG9yZWRfZXJyb3I7IH0Kdm9pZCBDb252b2x1dGlvbl9jbGVhcl9lcnJvcnModm9pZCkKewoJ
ZnJlZShzdG9yZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAwOwp9CgpzdGF0aWMgY2hhciBDb252b2x1dGlvbl91c2Vfc2ltdWxhdGlvblsxNl07CnN0
YXRpYyB2b2lkIENvbnZvbHV0aW9uX2RlZl91c2Vfc2ltdWxhdGlvbih2b2lkKQp7Cglsb25nIHBp
ZCA9ICgobG9uZykgZ2V0cGlkKCkpICUgMTAwMDAwOwoJc25wcmludGYoQ29udm9sdXRpb25fdXNl
X3NpbXVsYXRpb24sIDE2LCAiQ29udm9sdXRfJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMgY29uc3Qg
Y2hhciAqQ29udm9sdXRpb25fY2hlY2tfdXNlX3NpbXVsYXRpb24odm9pZCkKewoJQ29udm9sdXRp
b25fZGVmX3VzZV9zaW11bGF0aW9uKCk7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gbWF4X2NvbmZp
Z19nZXRfc3RyaW5nKE1BWF9DT05GSUdfVVNFX1NJTVVMQVRJT04pOwoJaWYgKHVzZV9zaW0gPT0g
TlVMTCkgewoJCXVzZV9zaW0gPSBDb252b2x1dGlvbl91c2Vfc2ltdWxhdGlvbjsKCQltYXhfY29u
ZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxBVElPTiwgdXNlX3NpbSk7Cgl9Cgly
ZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGljIGludCBDb252b2x1dGlvbl9zaW11bGF0aW9uX2xhdW5j
aCA9IDA7CmludCBDb252b2x1dGlvbl9zaW11bGF0b3Jfc3RhcnQodm9pZCkKewoJaW50IHJldHZh
bCA9IDA7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gQ29udm9sdXRpb25fY2hlY2tfdXNlX3NpbXVs
YXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsKCXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNp
bXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2ltIC1kIDEgLW4gJXMgLWMgTUFYNDg0OEEgLVMgc2lt
dXRpbHMgcmVzdGFydCIsIHVzZV9zaW0pOwoJRklMRSAqcGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJy
Iik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJc3RybmNhdChidWZmLCAiIDogZmFpbGVkIHRv
IGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVmZikpKTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJ
cmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1ZmYsIDEwMjQsIHBpcGVfZnApICE9IE5VTEwp
IHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBnZXQgc2ltdWxhdG9yIGNvbW1hbmQgb3V0cHV0ICov
CgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAqLwoJCWlmIChzdHJzdHIoYnVmZiwgIkVycm9y
IikpIHsKCQkJc2V0X2Vycm9yKGJ1ZmYpOwoJCQlyZXR2YWwgPSAtMTsKCQl9Cgl9CglwY2xvc2Uo
cGlwZV9mcCk7CglyZXR1cm4gcmV0dmFsOwp9CgppbnQgQ29udm9sdXRpb25fc2ltdWxhdG9yX3N0
b3Aodm9pZCkKewoJY29uc3QgY2hhciAqdXNlX3NpbSA9IENvbnZvbHV0aW9uX2NoZWNrX3VzZV9z
aW11bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50ZihidWZmLCAxMDI0LCAiUEFU
SD1zaW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVzIC1jIE1BWDQ4NDhBIC1T
IHNpbXV0aWxzIHN0b3AiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAgPSBwb3BlbihidWZmLCAi
ciIpOwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVmZiwgIiA6IGZhaWxlZCB0
byBleGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0X2Vycm9yKGJ1ZmYpOwoJ
CXJldHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBwaXBlX2ZwKSAhPSBOVUxM
KSB7CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBjb21tYW5kIG91dHB1dCAq
LwoJCS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQk7Cgl9CglwY2xvc2UocGlwZV9mcCk7
CglyZXR1cm4gMDsKfQoKc3RhdGljIHZvaWQgQ29udm9sdXRpb25fc3RhdGljX2luaXQodm9pZCkg
CnsKCXN0b3JlZF9tYXhmaWxlID0gQ29udm9sdXRpb25faW5pdCgpOwoJaWYgKHN0b3JlZF9tYXhm
aWxlID09IE5VTEwgfHwgIW1heF9vayhzdG9yZWRfbWF4ZmlsZS0+ZXJyb3JzKSkgewoJCXN0b3Jl
ZF9tYXhmaWxlID0gTlVMTDsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RB
VElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9lcnJv
cigiVW5hYmxlIHRvIGxvYWQgbWF4ZmlsZSIpOyByZXR1cm47IH0KCX0KCWlmKCFtYXhfb2sobWF4
X2dsb2JhbF9lcnJvcnMoKSkpIHsKCQlzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFj
ZShtYXhfZ2xvYmFsX2Vycm9ycygpKSk7CgkJcmV0dXJuOwoJfQoJaWYoIW1heF9jb25maWdfZ2V0
X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkKCQltYXhf
ZXJyb3JzX21vZGUoc3RvcmVkX21heGZpbGUtPmVycm9ycywgMCk7Cgl0aW1lX3QgdGltZW91dF9w
cmV2aW91cyA9IG1heF9sb2FkX3RpbWVvdXQoc3RvcmVkX21heGZpbGUsIDMwKTsKCWNvbnN0IGNo
YXIgKnVzZV9zaW0gPSBDb252b2x1dGlvbl9jaGVja191c2Vfc2ltdWxhdGlvbigpOwoJaWYgKG1h
eF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMCkgewoJCWludCBzaW1f
c3RhdCA9IENvbnZvbHV0aW9uX3NpbXVsYXRvcl9zdGFydCgpOwoJCWlmICgoc2ltX3N0YXQgPT0g
MCkgJiYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMSkpIHsK
CQkJQ29udm9sdXRpb25fc2ltdWxhdGlvbl9sYXVuY2ggPSAxOwoJCX0gZWxzZSB7CgkJCXNldF9l
cnJvcigiRXJyb3I6IEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBzdGFydCB0aGUg
c2ltdWxhdGlvbiBpbmZyYXN0cnVjdHVyZSBhdXRvbWF0aWNhbGx5LiIpOwoJCQlzZXRfZXJyb3Io
IkVycm9yOiBDaGVjayB0aGF0ICd1c2Vfc2ltdWxhdGlvbj08c2ltdWxhdG9yX25hbWU+JyBpcyBz
ZXQgY29ycmVjdGx5IGluIHlvdXIgU0xpQyBjb25maWd1cmF0aW9uIik7CgkJCXNldF9lcnJvcigi
RXJyb3I6IGFuZCB0aGF0IHRoZSBhc3NvY2lhdGVkIHNpbXVsYXRlZCBzeXN0ZW0gZGFlbW9uIGlz
IHJ1bm5pbmcuIik7CgkJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUpOwoJCQlzdG9yZWRf
bWF4ZmlsZSA9IE5VTEw7CgkJCXJldHVybjsKCQl9Cgl9CglzdG9yZWRfZW5naW5lID0gbWF4X2xv
YWQoc3RvcmVkX21heGZpbGUsICIqIik7CglpZiAoIW1heF9vayhzdG9yZWRfbWF4ZmlsZS0+ZXJy
b3JzKSkgewoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJG
QUNFX0FCT1JUX09OX0VSUk9SKSkgewoJCQlmcHJpbnRmKHN0ZGVyciwgIlxuVW5hYmxlIHRvIGxv
YWQgZW5naW5lOiBhYm9ydGluZyBub3cuXG5cbiIpOwoJCQlmZmx1c2goc3RkZXJyKTsKCQkJYWJv
cnQoKTsKCQl9IGVsc2UgewoJCQlzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShz
dG9yZWRfbWF4ZmlsZS0+ZXJyb3JzKSk7CgkJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUp
OwoJCQlzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CgkJCXJldHVybjsKCQl9IAoJfSAKCW1heF9sb2Fk
X3RpbWVvdXQoc3RvcmVkX21heGZpbGUsIHRpbWVvdXRfcHJldmlvdXMpOwp9CnZvaWQgQ29udm9s
dXRpb25fZnJlZSh2b2lkKQp7CglpZiAoc3RvcmVkX2VuZ2luZSAhPSBOVUxMKSB7CgkJbWF4X3Vu
bG9hZChzdG9yZWRfZW5naW5lKTsKCQlzdG9yZWRfZW5naW5lID0gTlVMTDsKCX0KCWlmIChzdG9y
ZWRfbWF4ZmlsZSAhPSBOVUxMKSB7CgkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJ
c3RvcmVkX21heGZpbGUgPSBOVUxMOwoJfQoJaWYgKHN0b3JlZF9lcnJvciAhPSBOVUxMKSB7CgkJ
ZnJlZShzdG9yZWRfZXJyb3IpOwoJCXN0b3JlZF9lcnJvciA9IE5VTEw7Cgl9CglpZiAoQ29udm9s
dXRpb25fc2ltdWxhdGlvbl9sYXVuY2ggPT0gMSkgewoJCWludCBzaW1fc3RhdCA9IENvbnZvbHV0
aW9uX3NpbXVsYXRvcl9zdG9wKCk7CgkJaWYgKHNpbV9zdGF0ICE9IDAgKSB7CgkJCWZwcmludGYo
c3RkZXJyLCAiRXJyb3Igc3RvcHBpbmcgc2ltdWxhdG9yLiIpOwoJCX0KCQlDb252b2x1dGlvbl9z
aW11bGF0aW9uX2xhdW5jaCA9IDA7Cgl9Cn0KCnN0YXRpYyBpbnQgQ29udm9sdXRpb25fZ2V0X3Bj
aWVfYWxpZ25tZW50KHZvaWQpCnsKI2lmZGVmIENvbnZvbHV0aW9uX1BDSUVfQUxJR05NRU5UCgly
ZXR1cm4gKChDb252b2x1dGlvbl9QQ0lFX0FMSUdOTUVOVCA8IDEpID8gMTYgOiBDb252b2x1dGlv
bl9QQ0lFX0FMSUdOTUVOVCk7CiNlbHNlCglyZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50
IENvbnZvbHV0aW9uX2NoZWNrX2FsaWduZWQoY29uc3Qgdm9pZCAqZGF0YSkKewoJdWludHB0cl90
IHBvaW50ZXIgPSAodWludHB0cl90KSBkYXRhOwoJaW50IGFsaWdubWVudCA9IENvbnZvbHV0aW9u
X2dldF9wY2llX2FsaWdubWVudCgpOwoJcmV0dXJuIChwb2ludGVyICUgYWxpZ25tZW50KSA/IDEg
OiAwOwp9CgpzdGF0aWMgdm9pZCAqQ29udm9sdXRpb25fbWFsbG9jX2FsaWduZWQoY29uc3Qgc2l6
ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGlnbm1lbnQgPSBDb252b2x1dGlvbl9nZXRf
cGNpZV9hbGlnbm1lbnQoKTsKCXBvc2l4X21lbWFsaWduKCZwdHIsIGFsaWdubWVudCwgc2l6ZSk7
CglyZXR1cm4gcHRyOwp9CgoKCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCi8qLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLSBJbnRlcmZhY2UgZGVmYXVsdCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoKCiNkZWZpbmUgQ0hFQ0tfRVJST1JT
X1NUKFNULCBSRVQpIGlmKCFtYXhfb2soU1QtPmVycm9ycykpIHsgaWYobWF4X2NvbmZpZ19nZXRf
Ym9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7IGZwcmlu
dGYoc3RkZXJyLCAiJXNcbiIsIG1heF9lcnJvcnNfdHJhY2UoU1QtPmVycm9ycykpOyBhYm9ydCgp
OyB9IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKFNULT5lcnJvcnMpKTsgcmV0
dXJuIFJFVDsgfSAKI2RlZmluZSBDSEVDS19OVUxMKFZBTFVFLCBNRVNTQUdFLCBSRVQpIGlmKFZB
TFVFID09IE5VTEwpIHsgaWYgKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNf
SU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0ZGVyciwgIiVzXG4lc1xuIiwg
KHN0b3JlZF9lcnJvciA9PSBOVUxMKSA/ICIiIDogc3RvcmVkX2Vycm9yLCBNRVNTQUdFKTsgYWJv
cnQoKTsgfSBzZXRfZXJyb3IoTUVTU0FHRSk7IHJldHVybiBSRVQ7IH0KCiAKdHlwZWRlZiBzdHJ1
Y3QgQ29udm9sdXRpb25fY2FsbGJhY2tfc3RyZWFtIHsKCXVpbnQ4X3QgKnVzZXJfcHRyOwoJdWlu
dDhfdCAqYWxpZ25lZF9wdHI7CglzaXplX3QgICBzaXplOwoJaW50ICAgICAgaXNfb3V0cHV0Owp9
IENvbnZvbHV0aW9uX2NhbGxiYWNrX3N0cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3QgQ29udm9sdXRp
b25fY2FsbGJhY2tfZGF0YSB7CglDb252b2x1dGlvbl9jYWxsYmFja19zdHJlYW1fdCBzdHJlYW1b
Ml07IAoJaW50IGNvdW50OwoJaW50IG1heF9jb3VudDsKfSBDb252b2x1dGlvbl9jYWxsYmFja19k
YXRhX3Q7CgpzdGF0aWMgdm9pZCBDb252b2x1dGlvbl9jYWxsYmFja19pbnRlcm5hbCh2b2lkICpj
Yl9kYXRhKQp7CglDb252b2x1dGlvbl9jYWxsYmFja19kYXRhX3QgKmRhdGEgPSAoQ29udm9sdXRp
b25fY2FsbGJhY2tfZGF0YV90KikgY2JfZGF0YTsKCWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEt
PmNvdW50IDsgaSsrICkgewoJCUNvbnZvbHV0aW9uX2NhbGxiYWNrX3N0cmVhbV90ICpzID0gJmRh
dGEtPnN0cmVhbVtpXTsKCQlpZiAocy0+aXNfb3V0cHV0ICYmIChzLT5zaXplID4gMCkpIHsKCQkJ
bWVtY3B5KHMtPnVzZXJfcHRyLCBzLT5hbGlnbmVkX3B0ciwgcy0+c2l6ZSk7CgkJfQoJCWZyZWUo
cy0+YWxpZ25lZF9wdHIpOwoJfQoJZnJlZShkYXRhKTsKfQoKc3RhdGljIG1heF9hY3Rpb25zX3Qq
IENvbnZvbHV0aW9uX2NvbnZlcnRfaW50ZXJuYWwoCgltYXhfZmlsZV90ICptYXhmaWxlLAoJQ29u
dm9sdXRpb25fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxf
Y2FsbCwKCXZvaWQgKCoqY2FsbGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2Rh
dGEpCnsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUs
IE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tf
RVJST1JTIGlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUo
bWF4X2Vycm9yc190cmFjZShhY3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJQ29u
dm9sdXRpb25fY2FsbGJhY2tfZGF0YV90ICpjYl9kYXRhID0gTlVMTDsKCWludCB1c2VfY2FsbGJh
Y2sgPSAoY2FsbGJhY2tfZnVuYyAhPSBOVUxMKSAmJiAoY2FsbGJhY2tfZGF0YSAhPSBOVUxMKTsK
CWlmICh1c2VfY2FsbGJhY2spIHsKCQljYl9kYXRhID0gbWFsbG9jKHNpemVvZihDb252b2x1dGlv
bl9jYWxsYmFja19kYXRhX3QpKTsKCQlpZiAoY2JfZGF0YSA9PSBOVUxMKSB7CgkJCWZwcmludGYo
c3RkZXJyLCAiVW5hYmxlIHRvIGFsbG9jYXRlIG1lbW9yeSBmb3Igc3RyZWFtIGNhbGxiYWNrIGRh
dGEgaW4gZnVuY3Rpb24gQ29udm9sdXRpb25fY29udmVydF9pbnRlcm5hbFxuIik7CgkJCXJldHVy
biBOVUxMOwoJCX0KCQljYl9kYXRhLT5tYXhfY291bnQgPSAyOwoJCWNiX2RhdGEtPmNvdW50ICAg
ICA9IDA7CgkJKmNhbGxiYWNrX2RhdGEgICAgID0gY2JfZGF0YTsKCQkqY2FsbGJhY2tfZnVuYyAg
ICAgPSAmQ29udm9sdXRpb25fY2FsbGJhY2tfaW50ZXJuYWw7Cgl9CgoJLyogY29kZSBmb3Igb2Zm
c2V0IENvbnZvbHV0aW9uS2VybmVsX255Ki8KCWxvbmcgb2Zmc2V0X0NvbnZvbHV0aW9uS2VybmVs
X255ID0gaW50ZXJmYWNlX2FjdGlvbnMtPm9mZnNldF9Db252b2x1dGlvbktlcm5lbF9ueTsKCW1h
eF9zZXRfb2Zmc2V0KGFjdGlvbnMsICJDb252b2x1dGlvbktlcm5lbCIsICJueSIsIG9mZnNldF9D
b252b2x1dGlvbktlcm5lbF9ueSk7CglDSEVDS19FUlJPUlM7CgkvKiBlbmQgb2YgY29kZSBmb3Ig
b2Zmc2V0IG9mZnNldF9Db252b2x1dGlvbktlcm5lbF9ueSovCgkKCWludDY0X3QgcGFyYW1faGVp
Z2h0ID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBhcmFtX2hlaWdodDsKCQoJaW50NjRfdCBwYXJhbV93
aWR0aCA9IGludGVyZmFjZV9hY3Rpb25zLT5wYXJhbV93aWR0aDsKCQoJaW50NjRfdCB0bXBfMCA9
IChwYXJhbV93aWR0aCAqIHBhcmFtX2hlaWdodCk7CgkKCS8qIGNvZGUgZm9yIHNjYWxhciBDb252
b2x1dGlvbktlcm5lbC5ydW5fY3ljbGVfY291bnQgKi8KCXVpbnQ2NF90IHRpY2tzX0NvbnZvbHV0
aW9uS2VybmVsID0gdG1wXzA7CgltYXhfc2V0X3RpY2tzKGFjdGlvbnMsICJDb252b2x1dGlvbktl
cm5lbCIsIHRtcF8wKTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIg
Q29udm9sdXRpb25LZXJuZWwucnVuX2N5Y2xlX2NvdW50Ki8KCQoJLyogY29kZSBmb3Igc2NhbGFy
IENvbnZvbHV0aW9uS2VybmVsLmhlaWdodCAqLwoJdWludDY0X3QgaW5zY2FsYXJfQ29udm9sdXRp
b25LZXJuZWxfaGVpZ2h0ID0gcGFyYW1faGVpZ2h0OwoJbWF4X3NldF91aW50NjR0KGFjdGlvbnMs
ICJDb252b2x1dGlvbktlcm5lbCIsICJoZWlnaHQiLCBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5l
bF9oZWlnaHQpOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBDb252
b2x1dGlvbktlcm5lbC5oZWlnaHQqLwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgQ29udm9sdXRpb25L
ZXJuZWwudzEgKi8KCWRvdWJsZSBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93MSA9IGludGVy
ZmFjZV9hY3Rpb25zLT5pbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93MTsKCW1heF9zZXRfZG91
YmxlKGFjdGlvbnMsICJDb252b2x1dGlvbktlcm5lbCIsICJ3MSIsIGluc2NhbGFyX0NvbnZvbHV0
aW9uS2VybmVsX3cxKTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIg
Q29udm9sdXRpb25LZXJuZWwudzEqLwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgQ29udm9sdXRpb25L
ZXJuZWwudzIgKi8KCWRvdWJsZSBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93MiA9IGludGVy
ZmFjZV9hY3Rpb25zLT5pbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93MjsKCW1heF9zZXRfZG91
YmxlKGFjdGlvbnMsICJDb252b2x1dGlvbktlcm5lbCIsICJ3MiIsIGluc2NhbGFyX0NvbnZvbHV0
aW9uS2VybmVsX3cyKTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIg
Q29udm9sdXRpb25LZXJuZWwudzIqLwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgQ29udm9sdXRpb25L
ZXJuZWwudzMgKi8KCWRvdWJsZSBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93MyA9IGludGVy
ZmFjZV9hY3Rpb25zLT5pbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93MzsKCW1heF9zZXRfZG91
YmxlKGFjdGlvbnMsICJDb252b2x1dGlvbktlcm5lbCIsICJ3MyIsIGluc2NhbGFyX0NvbnZvbHV0
aW9uS2VybmVsX3czKTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIg
Q29udm9sdXRpb25LZXJuZWwudzMqLwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgQ29udm9sdXRpb25L
ZXJuZWwudzQgKi8KCWRvdWJsZSBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93NCA9IGludGVy
ZmFjZV9hY3Rpb25zLT5pbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93NDsKCW1heF9zZXRfZG91
YmxlKGFjdGlvbnMsICJDb252b2x1dGlvbktlcm5lbCIsICJ3NCIsIGluc2NhbGFyX0NvbnZvbHV0
aW9uS2VybmVsX3c0KTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIg
Q29udm9sdXRpb25LZXJuZWwudzQqLwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgQ29udm9sdXRpb25L
ZXJuZWwudzUgKi8KCWRvdWJsZSBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93NSA9IGludGVy
ZmFjZV9hY3Rpb25zLT5pbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93NTsKCW1heF9zZXRfZG91
YmxlKGFjdGlvbnMsICJDb252b2x1dGlvbktlcm5lbCIsICJ3NSIsIGluc2NhbGFyX0NvbnZvbHV0
aW9uS2VybmVsX3c1KTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIg
Q29udm9sdXRpb25LZXJuZWwudzUqLwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgQ29udm9sdXRpb25L
ZXJuZWwudzYgKi8KCWRvdWJsZSBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93NiA9IGludGVy
ZmFjZV9hY3Rpb25zLT5pbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93NjsKCW1heF9zZXRfZG91
YmxlKGFjdGlvbnMsICJDb252b2x1dGlvbktlcm5lbCIsICJ3NiIsIGluc2NhbGFyX0NvbnZvbHV0
aW9uS2VybmVsX3c2KTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIg
Q29udm9sdXRpb25LZXJuZWwudzYqLwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgQ29udm9sdXRpb25L
ZXJuZWwudzcgKi8KCWRvdWJsZSBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93NyA9IGludGVy
ZmFjZV9hY3Rpb25zLT5pbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93NzsKCW1heF9zZXRfZG91
YmxlKGFjdGlvbnMsICJDb252b2x1dGlvbktlcm5lbCIsICJ3NyIsIGluc2NhbGFyX0NvbnZvbHV0
aW9uS2VybmVsX3c3KTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIg
Q29udm9sdXRpb25LZXJuZWwudzcqLwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgQ29udm9sdXRpb25L
ZXJuZWwudzggKi8KCWRvdWJsZSBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93OCA9IGludGVy
ZmFjZV9hY3Rpb25zLT5pbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93ODsKCW1heF9zZXRfZG91
YmxlKGFjdGlvbnMsICJDb252b2x1dGlvbktlcm5lbCIsICJ3OCIsIGluc2NhbGFyX0NvbnZvbHV0
aW9uS2VybmVsX3c4KTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIg
Q29udm9sdXRpb25LZXJuZWwudzgqLwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgQ29udm9sdXRpb25L
ZXJuZWwudzkgKi8KCWRvdWJsZSBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93OSA9IGludGVy
ZmFjZV9hY3Rpb25zLT5pbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93OTsKCW1heF9zZXRfZG91
YmxlKGFjdGlvbnMsICJDb252b2x1dGlvbktlcm5lbCIsICJ3OSIsIGluc2NhbGFyX0NvbnZvbHV0
aW9uS2VybmVsX3c5KTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIg
Q29udm9sdXRpb25LZXJuZWwudzkqLwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgQ29udm9sdXRpb25L
ZXJuZWwud2lkdGggKi8KCXVpbnQ2NF90IGluc2NhbGFyX0NvbnZvbHV0aW9uS2VybmVsX3dpZHRo
ID0gcGFyYW1fd2lkdGg7CgltYXhfc2V0X3VpbnQ2NHQoYWN0aW9ucywgIkNvbnZvbHV0aW9uS2Vy
bmVsIiwgIndpZHRoIiwgaW5zY2FsYXJfQ29udm9sdXRpb25LZXJuZWxfd2lkdGgpOwoJQ0hFQ0tf
RVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBDb252b2x1dGlvbktlcm5lbC53aWR0
aCovCgkKCWludDY0X3QgdG1wXzEgPSAodG1wXzAgKiA0KTsKCQoJLyogY29kZSBmb3Igc3RyZWFt
IGluU3RyZWFtICovCglzaXplX3QgaW5zdHJlYW1fc2l6ZV9pblN0cmVhbSA9IHRtcF8xOwoJaWYg
KGluc3RyZWFtX3NpemVfaW5TdHJlYW0gPiAwKSB7CgkJY29uc3QgZmxvYXQgKnN0cmVhbV9wdHIg
PSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1faW5TdHJlYW07CgkJaWYgKHVzZV9jYWxsYmFj
ayAmJiAoMSA9PSBDb252b2x1dGlvbl9jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5p
bnN0cmVhbV9pblN0cmVhbSkpKSB7CgkJCWZsb2F0ICphbGlnbmVkX2luc3RyZWFtX2luU3RyZWFt
ID0gbWFsbG9jKGluc3RyZWFtX3NpemVfaW5TdHJlYW0pOwoJCQlpZiAoYWxpZ25lZF9pbnN0cmVh
bV9pblN0cmVhbSA9PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+
ZXJyb3JzLCBfX0ZJTEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGln
bmVkIG1lbW9yeSBmb3Igc3RyZWFtICdpblN0cmVhbSciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJ
fQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1
aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX2luU3RyZWFtOwoJCQkoJmNiX2Rh
dGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9ICh1aW50OF90KikgYWxp
Z25lZF9pbnN0cmVhbV9pblN0cmVhbTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291
bnRdKS0+c2l6ZSAgICAgICAgPSBpbnN0cmVhbV9zaXplX2luU3RyZWFtOwoJCQkoJmNiX2RhdGEt
PnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDA7CgkJCWNiX2RhdGEtPmNv
dW50ICs9IDE7CgkJCW1lbWNweShhbGlnbmVkX2luc3RyZWFtX2luU3RyZWFtLCBpbnRlcmZhY2Vf
YWN0aW9ucy0+aW5zdHJlYW1faW5TdHJlYW0sIGluc3RyZWFtX3NpemVfaW5TdHJlYW0pOwoJCQlz
dHJlYW1fcHRyID0gYWxpZ25lZF9pbnN0cmVhbV9pblN0cmVhbTsKCQl9CgkJbWF4X3F1ZXVlX2lu
cHV0KGFjdGlvbnMsICJpblN0cmVhbSIsIHN0cmVhbV9wdHIsIGluc3RyZWFtX3NpemVfaW5TdHJl
YW0pOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gaW5TdHJl
YW0gKi8KCQoJaW50NjRfdCB0bXBfMiA9ICgoKHBhcmFtX3dpZHRoIC0gMikgKiAocGFyYW1faGVp
Z2h0IC0gMikpICogNCk7CgkKCS8qIGNvZGUgZm9yIHN0cmVhbSBvdXRTdHJlYW0gKi8KCXNpemVf
dCBvdXRzdHJlYW1fc2l6ZV9vdXRTdHJlYW0gPSB0bXBfMjsKCWlmIChvdXRzdHJlYW1fc2l6ZV9v
dXRTdHJlYW0gPiAwKSB7CgkJZmxvYXQgKnN0cmVhbV9wdHIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+
b3V0c3RyZWFtX291dFN0cmVhbTsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IENvbnZvbHV0
aW9uX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV9vdXRTdHJlYW0p
KSkgewoJCQlmbG9hdCAqYWxpZ25lZF9vdXRzdHJlYW1fb3V0U3RyZWFtID0gbWFsbG9jKG91dHN0
cmVhbV9zaXplX291dFN0cmVhbSk7CgkJCWlmIChhbGlnbmVkX291dHN0cmVhbV9vdXRTdHJlYW0g
PT0gTlVMTCkgewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9ycywgX19G
SUxFX18sIF9fTElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25lZCBtZW1vcnkg
Zm9yIHN0cmVhbSAnb3V0U3RyZWFtJyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJCQl9CgkJCSgmY2Jf
ZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0gKHVpbnQ4X3QqKSBp
bnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX291dFN0cmVhbTsKCQkJKCZjYl9kYXRhLT5zdHJl
YW1bY2JfZGF0YS0+Y291bnRdKS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFsaWduZWRfb3V0
c3RyZWFtX291dFN0cmVhbTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+
c2l6ZSAgICAgICAgPSBvdXRzdHJlYW1fc2l6ZV9vdXRTdHJlYW07CgkJCSgmY2JfZGF0YS0+c3Ry
ZWFtW2NiX2RhdGEtPmNvdW50XSktPmlzX291dHB1dCAgID0gMTsKCQkJY2JfZGF0YS0+Y291bnQg
Kz0gMTsKCQkJc3RyZWFtX3B0ciA9IGFsaWduZWRfb3V0c3RyZWFtX291dFN0cmVhbTsKCQl9CgkJ
bWF4X3F1ZXVlX291dHB1dChhY3Rpb25zLCAib3V0U3RyZWFtIiwgc3RyZWFtX3B0ciwgb3V0c3Ry
ZWFtX3NpemVfb3V0U3RyZWFtKTsKCQlDSEVDS19FUlJPUlM7Cgl9CgkvKiBlbmQgb2YgY29kZSBm
b3Igc3RyZWFtIG91dFN0cmVhbSAqLwoJCglpZiAodXNlX2NhbGxiYWNrICYmIGNiX2RhdGEtPmNv
dW50ID09IDApIHsKCQkqY2FsbGJhY2tfZGF0YSA9IE5VTEw7CgkJKmNhbGxiYWNrX2Z1bmMgPSBO
VUxMOwoJCWZyZWUoY2JfZGF0YSk7Cgl9CglyZXR1cm4gYWN0aW9uczsKI3VuZGVmIENIRUNLX0VS
Uk9SUwp9Cgp2b2lkIENvbnZvbHV0aW9uKAoJaW50NjRfdCBwYXJhbV9oZWlnaHQsCglpbnQ2NF90
IHBhcmFtX3dpZHRoLAoJbG9uZyBvZmZzZXRfQ29udm9sdXRpb25LZXJuZWxfbnksCglkb3VibGUg
aW5zY2FsYXJfQ29udm9sdXRpb25LZXJuZWxfdzEsCglkb3VibGUgaW5zY2FsYXJfQ29udm9sdXRp
b25LZXJuZWxfdzIsCglkb3VibGUgaW5zY2FsYXJfQ29udm9sdXRpb25LZXJuZWxfdzMsCglkb3Vi
bGUgaW5zY2FsYXJfQ29udm9sdXRpb25LZXJuZWxfdzQsCglkb3VibGUgaW5zY2FsYXJfQ29udm9s
dXRpb25LZXJuZWxfdzUsCglkb3VibGUgaW5zY2FsYXJfQ29udm9sdXRpb25LZXJuZWxfdzYsCglk
b3VibGUgaW5zY2FsYXJfQ29udm9sdXRpb25LZXJuZWxfdzcsCglkb3VibGUgaW5zY2FsYXJfQ29u
dm9sdXRpb25LZXJuZWxfdzgsCglkb3VibGUgaW5zY2FsYXJfQ29udm9sdXRpb25LZXJuZWxfdzks
Cgljb25zdCBmbG9hdCAqaW5zdHJlYW1faW5TdHJlYW0sCglmbG9hdCAqb3V0c3RyZWFtX291dFN0
cmVhbSkKewoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgQ29u
dm9sdXRpb25fc3RhdGljX2luaXQpOwoJQ0hFQ0tfTlVMTChzdG9yZWRfbWF4ZmlsZSwgIk1heGZp
bGUgd2FzIG5vdCBsb2FkZWQiLCApOwoJbWF4X3J1bl90ICpydW4gPSBDb252b2x1dGlvbl9ub25i
bG9jayhwYXJhbV9oZWlnaHQsIHBhcmFtX3dpZHRoLCBvZmZzZXRfQ29udm9sdXRpb25LZXJuZWxf
bnksIGluc2NhbGFyX0NvbnZvbHV0aW9uS2VybmVsX3cxLCBpbnNjYWxhcl9Db252b2x1dGlvbktl
cm5lbF93MiwgaW5zY2FsYXJfQ29udm9sdXRpb25LZXJuZWxfdzMsIGluc2NhbGFyX0NvbnZvbHV0
aW9uS2VybmVsX3c0LCBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93NSwgaW5zY2FsYXJfQ29u
dm9sdXRpb25LZXJuZWxfdzYsIGluc2NhbGFyX0NvbnZvbHV0aW9uS2VybmVsX3c3LCBpbnNjYWxh
cl9Db252b2x1dGlvbktlcm5lbF93OCwgaW5zY2FsYXJfQ29udm9sdXRpb25LZXJuZWxfdzksIGlu
c3RyZWFtX2luU3RyZWFtLCBvdXRzdHJlYW1fb3V0U3RyZWFtKTsKCUNIRUNLX05VTEwocnVuLCAi
VW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCm1heF9ydW5fdCAq
Q29udm9sdXRpb25fbm9uYmxvY2soCglpbnQ2NF90IHBhcmFtX2hlaWdodCwKCWludDY0X3QgcGFy
YW1fd2lkdGgsCglsb25nIG9mZnNldF9Db252b2x1dGlvbktlcm5lbF9ueSwKCWRvdWJsZSBpbnNj
YWxhcl9Db252b2x1dGlvbktlcm5lbF93MSwKCWRvdWJsZSBpbnNjYWxhcl9Db252b2x1dGlvbktl
cm5lbF93MiwKCWRvdWJsZSBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93MywKCWRvdWJsZSBp
bnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93NCwKCWRvdWJsZSBpbnNjYWxhcl9Db252b2x1dGlv
bktlcm5lbF93NSwKCWRvdWJsZSBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93NiwKCWRvdWJs
ZSBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93NywKCWRvdWJsZSBpbnNjYWxhcl9Db252b2x1
dGlvbktlcm5lbF93OCwKCWRvdWJsZSBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93OSwKCWNv
bnN0IGZsb2F0ICppbnN0cmVhbV9pblN0cmVhbSwKCWZsb2F0ICpvdXRzdHJlYW1fb3V0U3RyZWFt
KQp7CglDb252b2x1dGlvbl9hY3Rpb25zX3QgaW50ZXJmYWNlX2FjdGlvbnM7CglpbnRlcmZhY2Vf
YWN0aW9ucy5wYXJhbV9oZWlnaHQgPSBwYXJhbV9oZWlnaHQ7CglpbnRlcmZhY2VfYWN0aW9ucy5w
YXJhbV93aWR0aCA9IHBhcmFtX3dpZHRoOwoJaW50ZXJmYWNlX2FjdGlvbnMub2Zmc2V0X0NvbnZv
bHV0aW9uS2VybmVsX255ID0gb2Zmc2V0X0NvbnZvbHV0aW9uS2VybmVsX255OwoJaW50ZXJmYWNl
X2FjdGlvbnMuaW5zY2FsYXJfQ29udm9sdXRpb25LZXJuZWxfdzEgPSBpbnNjYWxhcl9Db252b2x1
dGlvbktlcm5lbF93MTsKCWludGVyZmFjZV9hY3Rpb25zLmluc2NhbGFyX0NvbnZvbHV0aW9uS2Vy
bmVsX3cyID0gaW5zY2FsYXJfQ29udm9sdXRpb25LZXJuZWxfdzI7CglpbnRlcmZhY2VfYWN0aW9u
cy5pbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93MyA9IGluc2NhbGFyX0NvbnZvbHV0aW9uS2Vy
bmVsX3czOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zY2FsYXJfQ29udm9sdXRpb25LZXJuZWxfdzQg
PSBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93NDsKCWludGVyZmFjZV9hY3Rpb25zLmluc2Nh
bGFyX0NvbnZvbHV0aW9uS2VybmVsX3c1ID0gaW5zY2FsYXJfQ29udm9sdXRpb25LZXJuZWxfdzU7
CglpbnRlcmZhY2VfYWN0aW9ucy5pbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93NiA9IGluc2Nh
bGFyX0NvbnZvbHV0aW9uS2VybmVsX3c2OwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zY2FsYXJfQ29u
dm9sdXRpb25LZXJuZWxfdzcgPSBpbnNjYWxhcl9Db252b2x1dGlvbktlcm5lbF93NzsKCWludGVy
ZmFjZV9hY3Rpb25zLmluc2NhbGFyX0NvbnZvbHV0aW9uS2VybmVsX3c4ID0gaW5zY2FsYXJfQ29u
dm9sdXRpb25LZXJuZWxfdzg7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnNjYWxhcl9Db252b2x1dGlv
bktlcm5lbF93OSA9IGluc2NhbGFyX0NvbnZvbHV0aW9uS2VybmVsX3c5OwoJaW50ZXJmYWNlX2Fj
dGlvbnMuaW5zdHJlYW1faW5TdHJlYW0gPSBpbnN0cmVhbV9pblN0cmVhbTsKCWludGVyZmFjZV9h
Y3Rpb25zLm91dHN0cmVhbV9vdXRTdHJlYW0gPSBvdXRzdHJlYW1fb3V0U3RyZWFtOwoJKHZvaWQp
IHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgQ29udm9sdXRpb25fc3RhdGlj
X2luaXQpOwoJQ0hFQ0tfTlVMTChzdG9yZWRfbWF4ZmlsZSwgIk1heGZpbGUgd2FzIG5vdCBsb2Fk
ZWQiLCBOVUxMKTsKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxMOwoJdm9pZCAgKmNiX2Rh
dGEgICAgICAgICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gQ29udm9sdXRpb25f
Y29udmVydF9pbnRlcm5hbChzdG9yZWRfbWF4ZmlsZSwgJmludGVyZmFjZV9hY3Rpb25zLCAxLCAm
Y2JfZnVuYywgJmNiX2RhdGEpOwoJQ0hFQ0tfTlVMTChhY3Rpb25zLCAiVW5hYmxlIHRvIGJ1aWxk
IGFjdGlvbnMiLCBOVUxMKTsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCUNIRUNLX0VSUk9SU19T
VChhY3Rpb25zLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChzdG9yZWRfZW5naW5lLCBOVUxMKTsK
CW1heF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9ydW5f
bm9uYmxvY2soc3RvcmVkX2VuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9y
dW5fbm9uYmxvY2tfd2l0aF9jYihzdG9yZWRfZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9k
YXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7
CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlv
bnMpOwoJcmV0dXJuIHJ1bjsKfQoKdm9pZCBDb252b2x1dGlvbl9ydW4oCgltYXhfZW5naW5lX3Qg
KmVuZ2luZSwKCUNvbnZvbHV0aW9uX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1h
eF9ydW5fdCAqcnVuID0gQ29udm9sdXRpb25fcnVuX25vbmJsb2NrKGVuZ2luZSwgaW50ZXJmYWNl
X2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJ
bWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpDb252b2x1dGlvbl9ydW5fbm9uYmxvY2soCglt
YXhfZW5naW5lX3QgKmVuZ2luZSwKCUNvbnZvbHV0aW9uX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2Fj
dGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5naW5lX2dldF9tYXhfZmlsZShl
bmdpbmUpOyAKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxMOwoJdm9pZCAgKmNiX2RhdGEg
ICAgICAgICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gQ29udm9sdXRpb25fY29u
dmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgJmNiX2Z1bmMsICZj
Yl9kYXRhKTsKCUNIRUNLX05VTEwoYWN0aW9ucywgIlVuYWJsZSB0byBidWlsZCBhY3Rpb25zIiwg
TlVMTCk7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywg
TlVMTCk7CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5VTEwpIHsKCQlydW4gPSBt
YXhfcnVuX25vbmJsb2NrKGVuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9y
dW5fbm9uYmxvY2tfd2l0aF9jYihlbmdpbmUsIGFjdGlvbnMsIGNiX2Z1bmMsIGNiX2RhdGEpOwoJ
fQoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCBOVUxMKTsKCW1heF9h
Y3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBHcm91
cCBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0
Jy4KICogCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbixv
dXRdIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKgogKiBSdW4gdGhlIGFjdGlv
bnMgb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwLgogKi8Kdm9pZCBD
b252b2x1dGlvbl9ydW5fZ3JvdXAobWF4X2dyb3VwX3QgKmdyb3VwLCBDb252b2x1dGlvbl9hY3Rp
b25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1biA9IENvbnZvbHV0aW9u
X3J1bl9ncm91cF9ub25ibG9jayhncm91cCwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVM
TChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8q
KgogKiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rp
b24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUgdGhlIGFj
dGlvbnMgdG8gcnVuIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cCBh
bmQgcmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gbXVzdCBiZSBj
aGVja2VkIHdpdGggOjptYXhfd2FpdC4gCiAqIE5vdGUgdGhhdCB1c2Ugb2YgOjptYXhfbm93YWl0
IGlzIHByb2hpYml0ZWQgd2l0aCBub24tYmxvY2tpbmcgcnVubmluZyBvbiBncm91cHM6CiAqIHNl
ZSB0aGUgOjptYXhfcnVuX2dyb3VwX25vbmJsb2NrIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgZXhw
bGFuYXRpb24uCiAqCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFt
IFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gQSBoYW5k
bGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5VTEwgaW4gY2Fz
ZSBvZiBlcnJvci4KICovCm1heF9ydW5fdCAqQ29udm9sdXRpb25fcnVuX2dyb3VwX25vbmJsb2Nr
KG1heF9ncm91cF90ICpncm91cCwgQ29udm9sdXRpb25fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0
aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9ncm91cF9nZXRfbWF4X2ZpbGUoZ3Jv
dXApOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IENvbnZvbHV0aW9uX2NvbnZlcnRfaW50ZXJu
YWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsIE5VTEwsIE5VTEwpOwoJaWYoYWN0aW9u
cyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0
dXJuIE5VTEw7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CgltYXhfcnVuX3QgKnJ1biA9IG1heF9y
dW5fZ3JvdXBfbm9uYmxvY2soZ3JvdXAsIGFjdGlvbnMpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rp
b25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBz
dGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICogXHBhcmFt
IFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0gW2lu
LG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKgog
KiBSdW4gdGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFycmF5IG9mIGVuZ2luZXMuICBUaGUg
bGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25zCiAqIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5n
YXJyYXkuCiAqLwp2b2lkIENvbnZvbHV0aW9uX3J1bl9hcnJheShtYXhfZW5nYXJyYXlfdCAqZW5n
YXJyYXksIENvbnZvbHV0aW9uX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4
X3J1bl90ICpydW4gPSBDb252b2x1dGlvbl9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGlu
dGVyZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25z
IiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNl
ZCBzdGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0
Jy4KICogCiAqCiAqIFNjaGVkdWxlIHRvIHJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUg
YXJyYXkgb2YgZW5naW5lcywgYW5kIHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIGxlbmd0aCBv
ZiBpbnRlcmZhY2VfYWN0aW9ucyBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKiBU
aGUgc3RhdHVzIG9mIHRoZSBydW4gY2FuIGJlIGNoZWNrZWQgZWl0aGVyIGJ5IDo6bWF4X3dhaXQg
b3IgOjptYXhfbm93YWl0OwogKiBub3RlIHRoYXQgb25lIG9mIHRoZXNlICptdXN0KiBiZSBjYWxs
ZWQsIHNvIHRoYXQgYXNzb2NpYXRlZCBtZW1vcnkgY2FuIGJlIHJlbGVhc2VkLgogKgogKiBccGFy
YW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBb
aW5dIGludGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICogXHJl
dHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3Ig
TlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X3J1bl90ICpDb252b2x1dGlvbl9ydW5fYXJy
YXlfbm9uYmxvY2sobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBDb252b2x1dGlvbl9hY3Rpb25z
X3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5n
YXJyYXlfZ2V0X21heF9maWxlKGVuZ2FycmF5LCAwKTsKCWludCBpOwoJbWF4X2FjdGFycmF5X3Qg
KmFjdGFycmF5ID0gbWF4X2FjdGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJyYXktPnNpemUpOwoJ
aWYgKGFjdGFycmF5ID09IE5VTEwpIHJldHVybiBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqKmFycl9h
Y3Rpb25zID0gbWFsbG9jKGVuZ2FycmF5LT5zaXplICogc2l6ZW9mKG1heF9hY3Rpb25zX3QqKSk7
Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZTsgaSsrICkgewoJCW1heF9hY3Rpb25z
X3QgKmFjdGlvbnMgPSBDb252b2x1dGlvbl9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVy
ZmFjZV9hY3Rpb25zW2ldLCAxLCBOVUxMLCBOVUxMKTsKCQlpZiAoYWN0aW9ucyA9PSBOVUxMKSBy
ZXR1cm4gTlVMTDsKCQlhcnJfYWN0aW9uc1tpXSA9IGFjdGlvbnM7CgkJbWF4X3NldF9hY3Rpb24o
YWN0YXJyYXksIGksIGFjdGlvbnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2FycmF5
X25vbmJsb2NrKGVuZ2FycmF5LCBhY3RhcnJheSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJh
eS0+c2l6ZSA7IGkrKyApIHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1tpXSk7IH0KCW1h
eF9hY3RhcnJheV9mcmVlKGFjdGFycmF5KTsKCWZyZWUoYXJyX2FjdGlvbnMpOwoJcmV0dXJuIHJ1
bjsKfQoKCi8qKgogKiBcYnJpZWYgQ29udmVydHMgYSBzdGF0aWMtaW50ZXJmYWNlIGFjdGlvbiBz
dHJ1Y3QgaW50byBhIGR5bmFtaWMtaW50ZXJmYWNlIG1heF9hY3Rpb25zX3Qgc3RydWN0LgogKgog
KiBOb3RlIHRoYXQgdGhpcyBpcyBhbiBpbnRlcm5hbCB1dGlsaXR5IGZ1bmN0aW9uIHVzZWQgYnkg
b3RoZXIgZnVuY3Rpb25zIGluIHRoZSBzdGF0aWMgaW50ZXJmYWNlLgogKgogKiBccGFyYW0gW2lu
XSBtYXhmaWxlIFRoZSBtYXhmaWxlIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2Fj
dGlvbnMgVGhlIGludGVyZmFjZS1zcGVjaWZpYyBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBU
aGUgZHluYW1pYy1pbnRlcmZhY2UgYWN0aW9ucyB0byBydW4sIG9yIE5VTEwgaW4gY2FzZSBvZiBl
cnJvci4KICovCm1heF9hY3Rpb25zX3QqIENvbnZvbHV0aW9uX2NvbnZlcnQobWF4X2ZpbGVfdCAq
bWF4ZmlsZSwgQ29udm9sdXRpb25fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJcmV0
dXJuIENvbnZvbHV0aW9uX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlv
bnMsIDAsIE5VTEwsIE5VTEwpOwp9CgojdW5kZWYgQ0hFQ0tfRVJST1JTX1NUCiN1bmRlZiBDSEVD
S19OVUxMCgoK
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 16, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 100, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 99, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 50, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 98, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 52, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 53, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 97, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 55, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 56, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 80, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 57, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 58, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 59, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 60, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 61, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 101, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 75, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 81, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 83, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 84, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 91, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 92, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 78, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 93, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 94, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 90, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 44, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 62, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 67, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 96, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 64, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 65, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 66, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 68, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 95, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 70, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 71, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 73, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 74, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(ConvolutionKernel, 72, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c021478437d59c3b0c007b5b6c28883776d22c1ef3c0b02142b01889f5aec737f11c7c56ed40e0c2087a6a3f7")
#endif

