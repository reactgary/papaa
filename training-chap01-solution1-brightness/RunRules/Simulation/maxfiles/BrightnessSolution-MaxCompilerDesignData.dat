#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2015
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          46290
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-11-17"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "BrightnessSolution"
#define MAXFILE_BUILD_DIR  "/home/demo/Desktop/MaxCompiler-Builds/BrightnessSolution_VECTIS_DFE_SIM"
#define MAXFILE_BUILD_DATE  20160719
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 39)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX3424A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "BrightnessSolutionKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(BrightnessSolutionKernel, Kernel)
MANAGER_NODE(inImage, PCIe_From_Host_fwd)
MANAGER_NODE(outImage, PCIe_To_Host_fwd)
MANAGER_NODE(Stream_1, DualAspectMux)
MANAGER_NODE(Stream_6, DualAspectReg)
MANAGER_NODE(Stream_14, StreamPullPushAdapter)
MANAGER_NODE(Stream_10, Fifo)
MANAGER_NODE(Stream_12, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(BrightnessSolutionKernel, inImage, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(BrightnessSolutionKernel, outImage, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(inImage, inImage, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(outImage, outImage, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_6, input, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_6, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_14, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_14, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_10, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_10, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_12, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_12, output, OUT, STREAM, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(inImage, inImage, Stream_1, input, 128)
MANAGER_STREAM(BrightnessSolutionKernel, outImage, Stream_12, input, 32)
MANAGER_STREAM(Stream_1, output, Stream_10, input, 32)
MANAGER_STREAM(Stream_6, output, Stream_14, input, 128)
MANAGER_STREAM(Stream_14, output, outImage, outImage, 128)
MANAGER_STREAM(Stream_10, output, BrightnessSolutionKernel, inImage, 32)
MANAGER_STREAM(Stream_12, output, Stream_6, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(BrightnessSolutionKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
MANAGER_NODE_STACK_TRACE(inImage, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
MANAGER_NODE_STACK_TRACE(outImage, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
MANAGER_NODE_STACK_TRACE(Stream_6, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
MANAGER_NODE_STACK_TRACE(Stream_10, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
MANAGER_NODE_STACK_TRACE(Stream_12, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(BrightnessSolutionKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(BrightnessSolutionKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(BrightnessSolutionKernel, BrightnessSolutionKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(BrightnessSolutionKernel, inImage, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(BrightnessSolutionKernel, outImage, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(inImage, PCIePullSourceSyncMax3, "inImage")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectMuxSync, "Stream_1", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, FifoPushToPullSync, "Stream_10", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(BrightnessSolutionKernel, BrightnessSolutionKernel, "BrightnessSolutionKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_12, FifoPushToPullSync, "Stream_12", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_6, DualAspectRegSync, "Stream_6", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, PullToPushAdapterSync, "Stream_14")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(outImage, PCIePushSinkSyncMax3, "outImage")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 39)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "738d5aea5cf7fd1ec8e9a18de141d714fcaed48d15c44a09c36be027d73c1c99")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessSolutionKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessSolutionKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessSolutionKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessSolutionKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessSolutionKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessSolutionKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessSolutionKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessSolutionKernel, addDebugRegister, reg_dbg_fill_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessSolutionKernel, addDebugRegister, reg_dbg_flush_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessSolutionKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessSolutionKernel, addDebugRegister, reg_dbg_flush_start_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessSolutionKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessSolutionKernel, addDebugRegister, reg_dbg_full_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessSolutionKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessSolutionKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessSolutionKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(inImage, STREAM_FROM_HOST, 0)
PCIE_STREAM(outImage, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(BrightnessSolutionKernel.io_inImage_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(BrightnessSolutionKernel.BrightnessSolutionAdjust, 0x1, 4, hwOffsetFix(32, 0, TWOSCOMPLEMENT))
REG(BrightnessSolutionKernel.io_outImage_force_disabled, 0x5, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(BrightnessSolutionKernel.run_cycle_count, 0x6, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(BrightnessSolutionKernel.current_run_cycle_count, 0xc, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(BrightnessSolutionKernel.dbg_ctld_almost_empty, 0x12, 1, hwBits(1))
REG(BrightnessSolutionKernel.dbg_ctld_done, 0x13, 1, hwBits(1))
REG(BrightnessSolutionKernel.dbg_ctld_empty, 0x14, 1, hwBits(1))
REG(BrightnessSolutionKernel.dbg_ctld_read, 0x15, 1, hwBits(1))
REG(BrightnessSolutionKernel.dbg_ctld_read_pipe_dbg, 0x16, 1, hwBits(3))
REG(BrightnessSolutionKernel.dbg_ctld_request, 0x17, 1, hwBits(1))
REG(BrightnessSolutionKernel.dbg_done_out, 0x18, 1, hwBits(1))
REG(BrightnessSolutionKernel.dbg_fill_level, 0x19, 1, hwBits(4))
REG(BrightnessSolutionKernel.dbg_flush_level, 0x1a, 1, hwBits(4))
REG(BrightnessSolutionKernel.dbg_flush_start, 0x1b, 1, hwBits(1))
REG(BrightnessSolutionKernel.dbg_flush_start_level, 0x1c, 1, hwBits(4))
REG(BrightnessSolutionKernel.dbg_flushing, 0x1d, 1, hwBits(1))
REG(BrightnessSolutionKernel.dbg_full_level, 0x1e, 1, hwBits(4))
REG(BrightnessSolutionKernel.dbg_out_stall, 0x1f, 1, hwBits(1))
REG(BrightnessSolutionKernel.dbg_out_valid, 0x20, 1, hwBits(1))
REG(BrightnessSolutionKernel.dbg_stall_vector, 0x21, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x22, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x23, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(BrightnessSolutionKernel.io_inImage_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(BrightnessSolutionKernel.BrightnessSolutionAdjust, 0x1, 4, hwOffsetFix(32, 0, TWOSCOMPLEMENT), HOST_WRITE_ONLY, false)
REG_V2(BrightnessSolutionKernel.io_outImage_force_disabled, 0x5, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(BrightnessSolutionKernel.run_cycle_count, 0x6, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(BrightnessSolutionKernel.current_run_cycle_count, 0xc, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(BrightnessSolutionKernel.dbg_ctld_almost_empty, 0x12, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(BrightnessSolutionKernel.dbg_ctld_done, 0x13, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(BrightnessSolutionKernel.dbg_ctld_empty, 0x14, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(BrightnessSolutionKernel.dbg_ctld_read, 0x15, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(BrightnessSolutionKernel.dbg_ctld_read_pipe_dbg, 0x16, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(BrightnessSolutionKernel.dbg_ctld_request, 0x17, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(BrightnessSolutionKernel.dbg_done_out, 0x18, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(BrightnessSolutionKernel.dbg_fill_level, 0x19, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(BrightnessSolutionKernel.dbg_flush_level, 0x1a, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(BrightnessSolutionKernel.dbg_flush_start, 0x1b, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(BrightnessSolutionKernel.dbg_flush_start_level, 0x1c, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(BrightnessSolutionKernel.dbg_flushing, 0x1d, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(BrightnessSolutionKernel.dbg_full_level, 0x1e, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(BrightnessSolutionKernel.dbg_out_stall, 0x1f, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(BrightnessSolutionKernel.dbg_out_valid, 0x20, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(BrightnessSolutionKernel.dbg_stall_vector, 0x21, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x22, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x23, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("738d5aea5cf7fd1ec8e9a18de141d714fcaed48d15c44a09c36be027d73c1c99")
#endif




#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAX3REV, MAX3REVA)
CAPABILITY(MAX3RAM, DDR3_24GB)
CAPABILITY(MAX3FPGA, SXT475_2ES)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME BrightnessSolution
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_BrightnessSolution_H
#define SLIC_DECLARATIONS_BrightnessSolution_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define BrightnessSolution_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] inscalar_BrightnessSolutionKernel_BrightnessSolutionAdjust Input scalar parameter "BrightnessSolutionKernel.BrightnessSolutionAdjust".
 * \param [in] instream_inImage The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_outImage The stream should be of size (param_N * 4) bytes.
 */
void BrightnessSolution(
	int32_t param_N,
	uint64_t inscalar_BrightnessSolutionKernel_BrightnessSolutionAdjust,
	const int32_t *instream_inImage,
	int32_t *outstream_outImage);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] inscalar_BrightnessSolutionKernel_BrightnessSolutionAdjust Input scalar parameter "BrightnessSolutionKernel.BrightnessSolutionAdjust".
 * \param [in] instream_inImage The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_outImage The stream should be of size (param_N * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *BrightnessSolution_nonblock(
	int32_t param_N,
	uint64_t inscalar_BrightnessSolutionKernel_BrightnessSolutionAdjust,
	const int32_t *instream_inImage,
	int32_t *outstream_outImage);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int32_t param_N; /**<  [in] Interface Parameter "N".: Number of data items to process */
	uint64_t inscalar_BrightnessSolutionKernel_BrightnessSolutionAdjust; /**<  [in] Input scalar parameter "BrightnessSolutionKernel.BrightnessSolutionAdjust". */
	const int32_t *instream_inImage; /**<  [in] The stream should be of size (param_N * 4) bytes. */
	int32_t *outstream_outImage; /**<  [out] The stream should be of size (param_N * 4) bytes. */
} BrightnessSolution_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void BrightnessSolution_run(
	max_engine_t *engine,
	BrightnessSolution_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *BrightnessSolution_run_nonblock(
	max_engine_t *engine,
	BrightnessSolution_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void BrightnessSolution_run_group(max_group_t *group, BrightnessSolution_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *BrightnessSolution_run_group_nonblock(max_group_t *group, BrightnessSolution_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void BrightnessSolution_run_array(max_engarray_t *engarray, BrightnessSolution_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *BrightnessSolution_run_array_nonblock(max_engarray_t *engarray, BrightnessSolution_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* BrightnessSolution_convert(max_file_t *maxfile, BrightnessSolution_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* BrightnessSolution_init(void);

/* Error handling functions */
int BrightnessSolution_has_errors(void);
const char* BrightnessSolution_get_errors(void);
void BrightnessSolution_clear_errors(void);
/* Free statically allocated maxfile data */
void BrightnessSolution_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int BrightnessSolution_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int BrightnessSolution_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_BrightnessSolution_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(BrightnessSolutionKernel, 6, NodeInputMappedReg, "Scalar input (io_outImage_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nbrightness.BrightnessSolutionKernel.<init>(BrightnessSolutionKernel.maxj:27)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:20)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 7, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nbrightness.BrightnessSolutionKernel.<init>(BrightnessSolutionKernel.maxj:27)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:20)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 0, NodeInputMappedReg, "Scalar input (io_inImage_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nbrightness.BrightnessSolutionKernel.<init>(BrightnessSolutionKernel.maxj:19)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:20)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nbrightness.BrightnessSolutionKernel.<init>(BrightnessSolutionKernel.maxj:19)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:20)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 2, NodeInput, "Input(inImage)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nbrightness.BrightnessSolutionKernel.<init>(BrightnessSolutionKernel.maxj:19)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:20)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 3, NodeInputMappedReg, "Scalar input (BrightnessSolutionAdjust)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\nbrightness.BrightnessSolutionKernel.<init>(BrightnessSolutionKernel.maxj:21)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:20)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 4, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nbrightness.BrightnessSolutionKernel.<init>(BrightnessSolutionKernel.maxj:25)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:20)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 9, NodeOutput, "Output(outImage)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nbrightness.BrightnessSolutionKernel.<init>(BrightnessSolutionKernel.maxj:27)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:20)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 14, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 23, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 11, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 12, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 13, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 15, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 22, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 17, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 18, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 20, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 21, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(BrightnessSolutionKernel, 19, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nbrightness.BrightnessSolutionManager.main(BrightnessSolutionManager.maxj:24)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int BrightnessSolution_has_errors(void)
{	return stored_has_error; }
const char* BrightnessSolution_get_errors(void)
{	return stored_error; }
void BrightnessSolution_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char BrightnessSolution_use_simulation[16];
static void BrightnessSolution_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(BrightnessSolution_use_simulation, 16, "Brightne_%05ld_", pid);
}
static const char *BrightnessSolution_check_use_simulation(void)
{
	BrightnessSolution_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = BrightnessSolution_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int BrightnessSolution_simulation_launch = 0;
int BrightnessSolution_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = BrightnessSolution_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int BrightnessSolution_simulator_stop(void)
{
	const char *use_sim = BrightnessSolution_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void BrightnessSolution_static_init(void) 
{
	stored_maxfile = BrightnessSolution_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = BrightnessSolution_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = BrightnessSolution_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			BrightnessSolution_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void BrightnessSolution_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (BrightnessSolution_simulation_launch == 1) {
		int sim_stat = BrightnessSolution_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		BrightnessSolution_simulation_launch = 0;
	}
}

static int BrightnessSolution_get_pcie_alignment(void)
{
#ifdef BrightnessSolution_PCIE_ALIGNMENT
	return ((BrightnessSolution_PCIE_ALIGNMENT < 1) ? 16 : BrightnessSolution_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int BrightnessSolution_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = BrightnessSolution_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *BrightnessSolution_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = BrightnessSolution_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct BrightnessSolution_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} BrightnessSolution_callback_stream_t;

typedef struct BrightnessSolution_callback_data {
	BrightnessSolution_callback_stream_t stream[2]; 
	int count;
	int max_count;
} BrightnessSolution_callback_data_t;

static void BrightnessSolution_callback_internal(void *cb_data)
{
	BrightnessSolution_callback_data_t *data = (BrightnessSolution_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		BrightnessSolution_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* BrightnessSolution_convert_internal(
	max_file_t *maxfile,
	BrightnessSolution_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	BrightnessSolution_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(BrightnessSolution_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function BrightnessSolution_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &BrightnessSolution_callback_internal;
	}

	int32_t param_N = interface_actions->param_N;
	
	/* code for scalar BrightnessSolutionKernel.run_cycle_count */
	uint64_t ticks_BrightnessSolutionKernel = param_N;
	max_set_ticks(actions, "BrightnessSolutionKernel", param_N);
	CHECK_ERRORS;
	/* end of code for scalar BrightnessSolutionKernel.run_cycle_count*/
	
	/* code for scalar BrightnessSolutionKernel.BrightnessSolutionAdjust */
	uint64_t inscalar_BrightnessSolutionKernel_BrightnessSolutionAdjust = interface_actions->inscalar_BrightnessSolutionKernel_BrightnessSolutionAdjust;
	max_set_uint64t(actions, "BrightnessSolutionKernel", "BrightnessSolutionAdjust", inscalar_BrightnessSolutionKernel_BrightnessSolutionAdjust);
	CHECK_ERRORS;
	/* end of code for scalar BrightnessSolutionKernel.BrightnessSolutionAdjust*/
	
	int64_t tmp_0 = (param_N * 4);
	
	/* code for stream inImage */
	size_t instream_size_inImage = tmp_0;
	if (instream_size_inImage > 0) {
		const int32_t *stream_ptr = interface_actions->instream_inImage;
		if (use_callback && (1 == BrightnessSolution_check_aligned(interface_actions->instream_inImage))) {
			int32_t *aligned_instream_inImage = malloc(instream_size_inImage);
			if (aligned_instream_inImage == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'inImage'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_inImage;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_inImage;
			(&cb_data->stream[cb_data->count])->size        = instream_size_inImage;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_inImage, interface_actions->instream_inImage, instream_size_inImage);
			stream_ptr = aligned_instream_inImage;
		}
		max_queue_input(actions, "inImage", stream_ptr, instream_size_inImage);
		CHECK_ERRORS;
	}
	/* end of code for stream inImage */
	
	int64_t tmp_1 = (param_N * 4);
	
	/* code for stream outImage */
	size_t outstream_size_outImage = tmp_1;
	if (outstream_size_outImage > 0) {
		int32_t *stream_ptr = interface_actions->outstream_outImage;
		if (use_callback && (1 == BrightnessSolution_check_aligned(interface_actions->outstream_outImage))) {
			int32_t *aligned_outstream_outImage = malloc(outstream_size_outImage);
			if (aligned_outstream_outImage == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'outImage'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_outImage;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_outImage;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_outImage;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_outImage;
		}
		max_queue_output(actions, "outImage", stream_ptr, outstream_size_outImage);
		CHECK_ERRORS;
	}
	/* end of code for stream outImage */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void BrightnessSolution(
	int32_t param_N,
	uint64_t inscalar_BrightnessSolutionKernel_BrightnessSolutionAdjust,
	const int32_t *instream_inImage,
	int32_t *outstream_outImage)
{
	(void) pthread_once(&slic_bs_is_initialised, BrightnessSolution_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = BrightnessSolution_nonblock(param_N, inscalar_BrightnessSolutionKernel_BrightnessSolutionAdjust, instream_inImage, outstream_outImage);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *BrightnessSolution_nonblock(
	int32_t param_N,
	uint64_t inscalar_BrightnessSolutionKernel_BrightnessSolutionAdjust,
	const int32_t *instream_inImage,
	int32_t *outstream_outImage)
{
	BrightnessSolution_actions_t interface_actions;
	interface_actions.param_N = param_N;
	interface_actions.inscalar_BrightnessSolutionKernel_BrightnessSolutionAdjust = inscalar_BrightnessSolutionKernel_BrightnessSolutionAdjust;
	interface_actions.instream_inImage = instream_inImage;
	interface_actions.outstream_outImage = outstream_outImage;
	(void) pthread_once(&slic_bs_is_initialised, BrightnessSolution_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = BrightnessSolution_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void BrightnessSolution_run(
	max_engine_t *engine,
	BrightnessSolution_actions_t *interface_actions)
{
	max_run_t *run = BrightnessSolution_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *BrightnessSolution_run_nonblock(
	max_engine_t *engine,
	BrightnessSolution_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = BrightnessSolution_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void BrightnessSolution_run_group(max_group_t *group, BrightnessSolution_actions_t *interface_actions)
{
	max_run_t *run = BrightnessSolution_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *BrightnessSolution_run_group_nonblock(max_group_t *group, BrightnessSolution_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = BrightnessSolution_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void BrightnessSolution_run_array(max_engarray_t *engarray, BrightnessSolution_actions_t *interface_actions[])
{
	max_run_t *run = BrightnessSolution_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *BrightnessSolution_run_array_nonblock(max_engarray_t *engarray, BrightnessSolution_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = BrightnessSolution_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* BrightnessSolution_convert(max_file_t *maxfile, BrightnessSolution_actions_t *interface_actions)
{
	return BrightnessSolution_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int32_t, N, param_N)	
SLIC_SET_TICKS(BrightnessSolutionKernel, param_N)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_N * 4);)	
SLIC_STREAM(inImage, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_N * 4);)	
SLIC_STREAM(outImage, tmp_1)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IkJyaWdodG5lc3NTb2x1dGlv
bi5oIiBuYW1lPSJCcmlnaHRuZXNzU29sdXRpb24iPjxjb25zdGFudCBuYW1lPSJQQ0lFX0FMSUdO
TUVOVCIgdHlwZT0ibG9uZyIgdmFsdWU9IjE2Ii8+PGVuZ2luZW1vZGUgbmFtZT0iZGVmYXVsdCI+
PGZ1bmN0aW9uIG5hbWU9IkJyaWdodG5lc3NTb2x1dGlvbiIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48
c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7TiZxdW90Oy46IE51bWJlciBv
ZiBkYXRhIGl0ZW1zIHRvIHByb2Nlc3MiIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX04i
IHR5cGU9ImludDMyX3QiLz48c2NhbGFyIGRlc2M9IklucHV0IHNjYWxhciBwYXJhbWV0ZXIgJnF1
b3Q7QnJpZ2h0bmVzc1NvbHV0aW9uS2VybmVsLkJyaWdodG5lc3NTb2x1dGlvbkFkanVzdCZxdW90
Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc2NhbGFyX0JyaWdodG5lc3NTb2x1dGlvbktl
cm5lbF9CcmlnaHRuZXNzU29sdXRpb25BZGp1c3QiIHR5cGU9InVpbnQ2NF90Ii8+PGFycmF5IGRl
c2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNpemUgKHBhcmFtX04gKiA0KSBieXRlcy4iIGRp
cmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc3RyZWFtX2luSW1hZ2UiIHNpemU9IihwYXJhbV9OICog
NCkiIHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0iaW50MzJfdCI+PGRpbWVuc2lvbiBpbmRleD0iMCI+
PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iLyIgdmFs
dWU9IigocGFyYW1fTiAqIDQpIC8gNCkiPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9y
IG9wZXJhdG9yPSIqIiB2YWx1ZT0iKHBhcmFtX04gKiA0KSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFy
YW1fTiIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1
bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+
PC9mdW5jdGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNpb24+PC9hcnJheT48YXJyYXkgZGVzYz0i
VGhlIHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAocGFyYW1fTiAqIDQpIGJ5dGVzLiIgZGlyZWN0
aW9uPSJPdXRwdXQiIG5hbWU9Im91dHN0cmVhbV9vdXRJbWFnZSIgc2l6ZT0iKHBhcmFtX04gKiA0
KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJpbnQzMl90Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48
bGVuZ3RoPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1
ZT0iKChwYXJhbV9OICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Ig
b3BlcmF0b3I9IioiIHZhbHVlPSIocGFyYW1fTiAqIDQpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJh
bV9OIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVu
Y3Rpb25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48
L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjwvZnVuY3Rpb24+PC9l
bmdpbmVtb2RlPjwvbWF4ZmlsZT4=
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBCcmlnaHRuZXNzU29sdXRpb25faGFzX2Vycm9ycyh2b2lkKQp7CXJldHVybiBzdG9y
ZWRfaGFzX2Vycm9yOyB9CmNvbnN0IGNoYXIqIEJyaWdodG5lc3NTb2x1dGlvbl9nZXRfZXJyb3Jz
KHZvaWQpCnsJcmV0dXJuIHN0b3JlZF9lcnJvcjsgfQp2b2lkIEJyaWdodG5lc3NTb2x1dGlvbl9j
bGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9yZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0g
TlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9CgpzdGF0aWMgY2hhciBCcmlnaHRuZXNzU29s
dXRpb25fdXNlX3NpbXVsYXRpb25bMTZdOwpzdGF0aWMgdm9pZCBCcmlnaHRuZXNzU29sdXRpb25f
ZGVmX3VzZV9zaW11bGF0aW9uKHZvaWQpCnsKCWxvbmcgcGlkID0gKChsb25nKSBnZXRwaWQoKSkg
JSAxMDAwMDA7CglzbnByaW50ZihCcmlnaHRuZXNzU29sdXRpb25fdXNlX3NpbXVsYXRpb24sIDE2
LCAiQnJpZ2h0bmVfJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMgY29uc3QgY2hhciAqQnJpZ2h0bmVz
c1NvbHV0aW9uX2NoZWNrX3VzZV9zaW11bGF0aW9uKHZvaWQpCnsKCUJyaWdodG5lc3NTb2x1dGlv
bl9kZWZfdXNlX3NpbXVsYXRpb24oKTsKCWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBtYXhfY29uZmln
X2dldF9zdHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxBVElPTik7CglpZiAodXNlX3NpbSA9PSBO
VUxMKSB7CgkJdXNlX3NpbSA9IEJyaWdodG5lc3NTb2x1dGlvbl91c2Vfc2ltdWxhdGlvbjsKCQlt
YXhfY29uZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxBVElPTiwgdXNlX3NpbSk7
Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGljIGludCBCcmlnaHRuZXNzU29sdXRpb25fc2lt
dWxhdGlvbl9sYXVuY2ggPSAwOwppbnQgQnJpZ2h0bmVzc1NvbHV0aW9uX3NpbXVsYXRvcl9zdGFy
dCh2b2lkKQp7CglpbnQgcmV0dmFsID0gMDsKCWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBCcmlnaHRu
ZXNzU29sdXRpb25fY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsKCXNu
cHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2ltIC1k
IDEgLW4gJXMgLWMgTUFYMzQyNEEgLVMgc2ltdXRpbHMgcmVzdGFydCIsIHVzZV9zaW0pOwoJRklM
RSAqcGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJ
c3RybmNhdChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVm
ZikpKTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1
ZmYsIDEwMjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBnZXQg
c2ltdWxhdG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAq
LwoJCWlmIChzdHJzdHIoYnVmZiwgIkVycm9yIikpIHsKCQkJc2V0X2Vycm9yKGJ1ZmYpOwoJCQly
ZXR2YWwgPSAtMTsKCQl9Cgl9CglwY2xvc2UocGlwZV9mcCk7CglyZXR1cm4gcmV0dmFsOwp9Cgpp
bnQgQnJpZ2h0bmVzc1NvbHV0aW9uX3NpbXVsYXRvcl9zdG9wKHZvaWQpCnsKCWNvbnN0IGNoYXIg
KnVzZV9zaW0gPSBCcmlnaHRuZXNzU29sdXRpb25fY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNo
YXIgYnVmZlsxMDI0XTsKCXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRI
IG1heGNvbXBpbGVyc2ltIC1kIDEgLW4gJXMgLWMgTUFYMzQyNEEgLVMgc2ltdXRpbHMgc3RvcCIs
IHVzZV9zaW0pOwoJRklMRSAqcGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9m
cCA9PSBOVUxMKSB7CgkJc3RybmNhdChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEw
MjQgLSBzdHJsZW4oYnVmZikpKTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJ
d2hpbGUgKGZnZXRzKGJ1ZmYsIDEwMjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1l
bnQgdGhpcyB0byBnZXQgc2ltdWxhdG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50Zihz
dGRlcnIsIGJ1ZmYpOyAqLwoJCTsKCX0KCXBjbG9zZShwaXBlX2ZwKTsKCXJldHVybiAwOwp9Cgpz
dGF0aWMgdm9pZCBCcmlnaHRuZXNzU29sdXRpb25fc3RhdGljX2luaXQodm9pZCkgCnsKCXN0b3Jl
ZF9tYXhmaWxlID0gQnJpZ2h0bmVzc1NvbHV0aW9uX2luaXQoKTsKCWlmIChzdG9yZWRfbWF4Zmls
ZSA9PSBOVUxMIHx8ICFtYXhfb2soc3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlzdG9yZWRf
bWF4ZmlsZSA9IE5VTEw7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJ
Q19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3Io
IlVuYWJsZSB0byBsb2FkIG1heGZpbGUiKTsgcmV0dXJuOyB9Cgl9CglpZighbWF4X29rKG1heF9n
bG9iYWxfZXJyb3JzKCkpKSB7CgkJc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2Uo
bWF4X2dsb2JhbF9lcnJvcnMoKSkpOwoJCXJldHVybjsKCX0KCWlmKCFtYXhfY29uZmlnX2dldF9i
b29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpCgkJbWF4X2Vy
cm9yc19tb2RlKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMsIDApOwoJdGltZV90IHRpbWVvdXRfcHJl
dmlvdXMgPSBtYXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCAzMCk7Cgljb25zdCBjaGFy
ICp1c2Vfc2ltID0gQnJpZ2h0bmVzc1NvbHV0aW9uX2NoZWNrX3VzZV9zaW11bGF0aW9uKCk7Cglp
ZiAobWF4X3BpbmdfZGFlbW9uKHN0b3JlZF9tYXhmaWxlLCB1c2Vfc2ltKSA9PSAwKSB7CgkJaW50
IHNpbV9zdGF0ID0gQnJpZ2h0bmVzc1NvbHV0aW9uX3NpbXVsYXRvcl9zdGFydCgpOwoJCWlmICgo
c2ltX3N0YXQgPT0gMCkgJiYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3Np
bSkgPT0gMSkpIHsKCQkJQnJpZ2h0bmVzc1NvbHV0aW9uX3NpbXVsYXRpb25fbGF1bmNoID0gMTsK
CQl9IGVsc2UgewoJCQlzZXRfZXJyb3IoIkVycm9yOiBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0
cnlpbmcgdG8gc3RhcnQgdGhlIHNpbXVsYXRpb24gaW5mcmFzdHJ1Y3R1cmUgYXV0b21hdGljYWxs
eS4iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQ2hlY2sgdGhhdCAndXNlX3NpbXVsYXRpb249PHNp
bXVsYXRvcl9uYW1lPicgaXMgc2V0IGNvcnJlY3RseSBpbiB5b3VyIFNMaUMgY29uZmlndXJhdGlv
biIpOwoJCQlzZXRfZXJyb3IoIkVycm9yOiBhbmQgdGhhdCB0aGUgYXNzb2NpYXRlZCBzaW11bGF0
ZWQgc3lzdGVtIGRhZW1vbiBpcyBydW5uaW5nLiIpOwoJCQltYXhfZmlsZV9mcmVlKHN0b3JlZF9t
YXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQlyZXR1cm47CgkJfQoJfQoJc3Rv
cmVkX2VuZ2luZSA9IG1heF9sb2FkKHN0b3JlZF9tYXhmaWxlLCAiKiIpOwoJaWYgKCFtYXhfb2so
c3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9D
T05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsKCQkJZnByaW50ZihzdGRl
cnIsICJcblVuYWJsZSB0byBsb2FkIGVuZ2luZTogYWJvcnRpbmcgbm93LlxuXG4iKTsKCQkJZmZs
dXNoKHN0ZGVycik7CgkJCWFib3J0KCk7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yX2FuZF9mcmVl
KG1heF9lcnJvcnNfdHJhY2Uoc3RvcmVkX21heGZpbGUtPmVycm9ycykpOwoJCQltYXhfZmlsZV9m
cmVlKHN0b3JlZF9tYXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQlyZXR1cm47
CgkJfSAKCX0gCgltYXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCB0aW1lb3V0X3ByZXZp
b3VzKTsKfQp2b2lkIEJyaWdodG5lc3NTb2x1dGlvbl9mcmVlKHZvaWQpCnsKCWlmIChzdG9yZWRf
ZW5naW5lICE9IE5VTEwpIHsKCQltYXhfdW5sb2FkKHN0b3JlZF9lbmdpbmUpOwoJCXN0b3JlZF9l
bmdpbmUgPSBOVUxMOwoJfQoJaWYgKHN0b3JlZF9tYXhmaWxlICE9IE5VTEwpIHsKCQltYXhfZmls
ZV9mcmVlKHN0b3JlZF9tYXhmaWxlKTsKCQlzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7Cgl9CglpZiAo
c3RvcmVkX2Vycm9yICE9IE5VTEwpIHsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJc3RvcmVkX2Vy
cm9yID0gTlVMTDsKCX0KCWlmIChCcmlnaHRuZXNzU29sdXRpb25fc2ltdWxhdGlvbl9sYXVuY2gg
PT0gMSkgewoJCWludCBzaW1fc3RhdCA9IEJyaWdodG5lc3NTb2x1dGlvbl9zaW11bGF0b3Jfc3Rv
cCgpOwoJCWlmIChzaW1fc3RhdCAhPSAwICkgewoJCQlmcHJpbnRmKHN0ZGVyciwgIkVycm9yIHN0
b3BwaW5nIHNpbXVsYXRvci4iKTsKCQl9CgkJQnJpZ2h0bmVzc1NvbHV0aW9uX3NpbXVsYXRpb25f
bGF1bmNoID0gMDsKCX0KfQoKc3RhdGljIGludCBCcmlnaHRuZXNzU29sdXRpb25fZ2V0X3BjaWVf
YWxpZ25tZW50KHZvaWQpCnsKI2lmZGVmIEJyaWdodG5lc3NTb2x1dGlvbl9QQ0lFX0FMSUdOTUVO
VAoJcmV0dXJuICgoQnJpZ2h0bmVzc1NvbHV0aW9uX1BDSUVfQUxJR05NRU5UIDwgMSkgPyAxNiA6
IEJyaWdodG5lc3NTb2x1dGlvbl9QQ0lFX0FMSUdOTUVOVCk7CiNlbHNlCglyZXR1cm4gMTY7CiNl
bmRpZgp9CgpzdGF0aWMgaW50IEJyaWdodG5lc3NTb2x1dGlvbl9jaGVja19hbGlnbmVkKGNvbnN0
IHZvaWQgKmRhdGEpCnsKCXVpbnRwdHJfdCBwb2ludGVyID0gKHVpbnRwdHJfdCkgZGF0YTsKCWlu
dCBhbGlnbm1lbnQgPSBCcmlnaHRuZXNzU29sdXRpb25fZ2V0X3BjaWVfYWxpZ25tZW50KCk7Cgly
ZXR1cm4gKHBvaW50ZXIgJSBhbGlnbm1lbnQpID8gMSA6IDA7Cn0KCnN0YXRpYyB2b2lkICpCcmln
aHRuZXNzU29sdXRpb25fbWFsbG9jX2FsaWduZWQoY29uc3Qgc2l6ZV90IHNpemUpCnsKCXZvaWQg
KnB0cjsKCWludCBhbGlnbm1lbnQgPSBCcmlnaHRuZXNzU29sdXRpb25fZ2V0X3BjaWVfYWxpZ25t
ZW50KCk7Cglwb3NpeF9tZW1hbGlnbigmcHRyLCBhbGlnbm1lbnQsIHNpemUpOwoJcmV0dXJuIHB0
cjsKfQoKCgovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0gSW50ZXJmYWNlIGRlZmF1bHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwov
Ki0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCgojZGVmaW5lIENIRUNLX0VSUk9SU19TVChTVCwgUkVU
KSBpZighbWF4X29rKFNULT5lcnJvcnMpKSB7IGlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NP
TkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0ZGVyciwg
IiVzXG4iLCBtYXhfZXJyb3JzX3RyYWNlKFNULT5lcnJvcnMpKTsgYWJvcnQoKTsgfSBzZXRfZXJy
b3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IHJldHVybiBSRVQ7IH0g
CiNkZWZpbmUgQ0hFQ0tfTlVMTChWQUxVRSwgTUVTU0FHRSwgUkVUKSBpZihWQUxVRSA9PSBOVUxM
KSB7IGlmIChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9B
Qk9SVF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIsICIlc1xuJXNcbiIsIChzdG9yZWRfZXJy
b3IgPT0gTlVMTCkgPyAiIiA6IHN0b3JlZF9lcnJvciwgTUVTU0FHRSk7IGFib3J0KCk7IH0gc2V0
X2Vycm9yKE1FU1NBR0UpOyByZXR1cm4gUkVUOyB9CgogCnR5cGVkZWYgc3RydWN0IEJyaWdodG5l
c3NTb2x1dGlvbl9jYWxsYmFja19zdHJlYW0gewoJdWludDhfdCAqdXNlcl9wdHI7Cgl1aW50OF90
ICphbGlnbmVkX3B0cjsKCXNpemVfdCAgIHNpemU7CglpbnQgICAgICBpc19vdXRwdXQ7Cn0gQnJp
Z2h0bmVzc1NvbHV0aW9uX2NhbGxiYWNrX3N0cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3QgQnJpZ2h0
bmVzc1NvbHV0aW9uX2NhbGxiYWNrX2RhdGEgewoJQnJpZ2h0bmVzc1NvbHV0aW9uX2NhbGxiYWNr
X3N0cmVhbV90IHN0cmVhbVsyXTsgCglpbnQgY291bnQ7CglpbnQgbWF4X2NvdW50Owp9IEJyaWdo
dG5lc3NTb2x1dGlvbl9jYWxsYmFja19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBCcmlnaHRuZXNzU29s
dXRpb25fY2FsbGJhY2tfaW50ZXJuYWwodm9pZCAqY2JfZGF0YSkKewoJQnJpZ2h0bmVzc1NvbHV0
aW9uX2NhbGxiYWNrX2RhdGFfdCAqZGF0YSA9IChCcmlnaHRuZXNzU29sdXRpb25fY2FsbGJhY2tf
ZGF0YV90KikgY2JfZGF0YTsKCWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsgaSsr
ICkgewoJCUJyaWdodG5lc3NTb2x1dGlvbl9jYWxsYmFja19zdHJlYW1fdCAqcyA9ICZkYXRhLT5z
dHJlYW1baV07CgkJaWYgKHMtPmlzX291dHB1dCAmJiAocy0+c2l6ZSA+IDApKSB7CgkJCW1lbWNw
eShzLT51c2VyX3B0ciwgcy0+YWxpZ25lZF9wdHIsIHMtPnNpemUpOwoJCX0KCQlmcmVlKHMtPmFs
aWduZWRfcHRyKTsKCX0KCWZyZWUoZGF0YSk7Cn0KCnN0YXRpYyBtYXhfYWN0aW9uc190KiBCcmln
aHRuZXNzU29sdXRpb25fY29udmVydF9pbnRlcm5hbCgKCW1heF9maWxlX3QgKm1heGZpbGUsCglC
cmlnaHRuZXNzU29sdXRpb25fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNf
aW50ZXJuYWxfY2FsbCwKCXZvaWQgKCoqY2FsbGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNh
bGxiYWNrX2RhdGEpCnsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0
KG1heGZpbGUsIE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZp
bmUgQ0hFQ0tfRVJST1JTIGlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3Jf
YW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShhY3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7
IH0gCgoJQnJpZ2h0bmVzc1NvbHV0aW9uX2NhbGxiYWNrX2RhdGFfdCAqY2JfZGF0YSA9IE5VTEw7
CglpbnQgdXNlX2NhbGxiYWNrID0gKGNhbGxiYWNrX2Z1bmMgIT0gTlVMTCkgJiYgKGNhbGxiYWNr
X2RhdGEgIT0gTlVMTCk7CglpZiAodXNlX2NhbGxiYWNrKSB7CgkJY2JfZGF0YSA9IG1hbGxvYyhz
aXplb2YoQnJpZ2h0bmVzc1NvbHV0aW9uX2NhbGxiYWNrX2RhdGFfdCkpOwoJCWlmIChjYl9kYXRh
ID09IE5VTEwpIHsKCQkJZnByaW50ZihzdGRlcnIsICJVbmFibGUgdG8gYWxsb2NhdGUgbWVtb3J5
IGZvciBzdHJlYW0gY2FsbGJhY2sgZGF0YSBpbiBmdW5jdGlvbiBCcmlnaHRuZXNzU29sdXRpb25f
Y29udmVydF9pbnRlcm5hbFxuIik7CgkJCXJldHVybiBOVUxMOwoJCX0KCQljYl9kYXRhLT5tYXhf
Y291bnQgPSAyOwoJCWNiX2RhdGEtPmNvdW50ICAgICA9IDA7CgkJKmNhbGxiYWNrX2RhdGEgICAg
ID0gY2JfZGF0YTsKCQkqY2FsbGJhY2tfZnVuYyAgICAgPSAmQnJpZ2h0bmVzc1NvbHV0aW9uX2Nh
bGxiYWNrX2ludGVybmFsOwoJfQoKCWludDMyX3QgcGFyYW1fTiA9IGludGVyZmFjZV9hY3Rpb25z
LT5wYXJhbV9OOwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgQnJpZ2h0bmVzc1NvbHV0aW9uS2VybmVs
LnJ1bl9jeWNsZV9jb3VudCAqLwoJdWludDY0X3QgdGlja3NfQnJpZ2h0bmVzc1NvbHV0aW9uS2Vy
bmVsID0gcGFyYW1fTjsKCW1heF9zZXRfdGlja3MoYWN0aW9ucywgIkJyaWdodG5lc3NTb2x1dGlv
bktlcm5lbCIsIHBhcmFtX04pOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNj
YWxhciBCcmlnaHRuZXNzU29sdXRpb25LZXJuZWwucnVuX2N5Y2xlX2NvdW50Ki8KCQoJLyogY29k
ZSBmb3Igc2NhbGFyIEJyaWdodG5lc3NTb2x1dGlvbktlcm5lbC5CcmlnaHRuZXNzU29sdXRpb25B
ZGp1c3QgKi8KCXVpbnQ2NF90IGluc2NhbGFyX0JyaWdodG5lc3NTb2x1dGlvbktlcm5lbF9Ccmln
aHRuZXNzU29sdXRpb25BZGp1c3QgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zY2FsYXJfQnJpZ2h0
bmVzc1NvbHV0aW9uS2VybmVsX0JyaWdodG5lc3NTb2x1dGlvbkFkanVzdDsKCW1heF9zZXRfdWlu
dDY0dChhY3Rpb25zLCAiQnJpZ2h0bmVzc1NvbHV0aW9uS2VybmVsIiwgIkJyaWdodG5lc3NTb2x1
dGlvbkFkanVzdCIsIGluc2NhbGFyX0JyaWdodG5lc3NTb2x1dGlvbktlcm5lbF9CcmlnaHRuZXNz
U29sdXRpb25BZGp1c3QpOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxh
ciBCcmlnaHRuZXNzU29sdXRpb25LZXJuZWwuQnJpZ2h0bmVzc1NvbHV0aW9uQWRqdXN0Ki8KCQoJ
aW50NjRfdCB0bXBfMCA9IChwYXJhbV9OICogNCk7CgkKCS8qIGNvZGUgZm9yIHN0cmVhbSBpbklt
YWdlICovCglzaXplX3QgaW5zdHJlYW1fc2l6ZV9pbkltYWdlID0gdG1wXzA7CglpZiAoaW5zdHJl
YW1fc2l6ZV9pbkltYWdlID4gMCkgewoJCWNvbnN0IGludDMyX3QgKnN0cmVhbV9wdHIgPSBpbnRl
cmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1faW5JbWFnZTsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgx
ID09IEJyaWdodG5lc3NTb2x1dGlvbl9jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5p
bnN0cmVhbV9pbkltYWdlKSkpIHsKCQkJaW50MzJfdCAqYWxpZ25lZF9pbnN0cmVhbV9pbkltYWdl
ID0gbWFsbG9jKGluc3RyZWFtX3NpemVfaW5JbWFnZSk7CgkJCWlmIChhbGlnbmVkX2luc3RyZWFt
X2luSW1hZ2UgPT0gTlVMTCkgewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVy
cm9ycywgX19GSUxFX18sIF9fTElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25l
ZCBtZW1vcnkgZm9yIHN0cmVhbSAnaW5JbWFnZSciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJ
CQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50
OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX2luSW1hZ2U7CgkJCSgmY2JfZGF0YS0+
c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVk
X2luc3RyZWFtX2luSW1hZ2U7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSkt
PnNpemUgICAgICAgID0gaW5zdHJlYW1fc2l6ZV9pbkltYWdlOwoJCQkoJmNiX2RhdGEtPnN0cmVh
bVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDA7CgkJCWNiX2RhdGEtPmNvdW50ICs9
IDE7CgkJCW1lbWNweShhbGlnbmVkX2luc3RyZWFtX2luSW1hZ2UsIGludGVyZmFjZV9hY3Rpb25z
LT5pbnN0cmVhbV9pbkltYWdlLCBpbnN0cmVhbV9zaXplX2luSW1hZ2UpOwoJCQlzdHJlYW1fcHRy
ID0gYWxpZ25lZF9pbnN0cmVhbV9pbkltYWdlOwoJCX0KCQltYXhfcXVldWVfaW5wdXQoYWN0aW9u
cywgImluSW1hZ2UiLCBzdHJlYW1fcHRyLCBpbnN0cmVhbV9zaXplX2luSW1hZ2UpOwoJCUNIRUNL
X0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gaW5JbWFnZSAqLwoJCglpbnQ2
NF90IHRtcF8xID0gKHBhcmFtX04gKiA0KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIG91dEltYWdl
ICovCglzaXplX3Qgb3V0c3RyZWFtX3NpemVfb3V0SW1hZ2UgPSB0bXBfMTsKCWlmIChvdXRzdHJl
YW1fc2l6ZV9vdXRJbWFnZSA+IDApIHsKCQlpbnQzMl90ICpzdHJlYW1fcHRyID0gaW50ZXJmYWNl
X2FjdGlvbnMtPm91dHN0cmVhbV9vdXRJbWFnZTsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09
IEJyaWdodG5lc3NTb2x1dGlvbl9jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5vdXRz
dHJlYW1fb3V0SW1hZ2UpKSkgewoJCQlpbnQzMl90ICphbGlnbmVkX291dHN0cmVhbV9vdXRJbWFn
ZSA9IG1hbGxvYyhvdXRzdHJlYW1fc2l6ZV9vdXRJbWFnZSk7CgkJCWlmIChhbGlnbmVkX291dHN0
cmVhbV9vdXRJbWFnZSA9PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9u
cy0+ZXJyb3JzLCBfX0ZJTEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBh
bGlnbmVkIG1lbW9yeSBmb3Igc3RyZWFtICdvdXRJbWFnZSciKTsKCQkJCUNIRUNLX0VSUk9SUzsK
CQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9
ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV9vdXRJbWFnZTsKCQkJKCZj
Yl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCop
IGFsaWduZWRfb3V0c3RyZWFtX291dEltYWdlOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRh
LT5jb3VudF0pLT5zaXplICAgICAgICA9IG91dHN0cmVhbV9zaXplX291dEltYWdlOwoJCQkoJmNi
X2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDE7CgkJCWNiX2Rh
dGEtPmNvdW50ICs9IDE7CgkJCXN0cmVhbV9wdHIgPSBhbGlnbmVkX291dHN0cmVhbV9vdXRJbWFn
ZTsKCQl9CgkJbWF4X3F1ZXVlX291dHB1dChhY3Rpb25zLCAib3V0SW1hZ2UiLCBzdHJlYW1fcHRy
LCBvdXRzdHJlYW1fc2l6ZV9vdXRJbWFnZSk7CgkJQ0hFQ0tfRVJST1JTOwoJfQoJLyogZW5kIG9m
IGNvZGUgZm9yIHN0cmVhbSBvdXRJbWFnZSAqLwoJCglpZiAodXNlX2NhbGxiYWNrICYmIGNiX2Rh
dGEtPmNvdW50ID09IDApIHsKCQkqY2FsbGJhY2tfZGF0YSA9IE5VTEw7CgkJKmNhbGxiYWNrX2Z1
bmMgPSBOVUxMOwoJCWZyZWUoY2JfZGF0YSk7Cgl9CglyZXR1cm4gYWN0aW9uczsKI3VuZGVmIENI
RUNLX0VSUk9SUwp9Cgp2b2lkIEJyaWdodG5lc3NTb2x1dGlvbigKCWludDMyX3QgcGFyYW1fTiwK
CXVpbnQ2NF90IGluc2NhbGFyX0JyaWdodG5lc3NTb2x1dGlvbktlcm5lbF9CcmlnaHRuZXNzU29s
dXRpb25BZGp1c3QsCgljb25zdCBpbnQzMl90ICppbnN0cmVhbV9pbkltYWdlLAoJaW50MzJfdCAq
b3V0c3RyZWFtX291dEltYWdlKQp7Cgkodm9pZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2lu
aXRpYWxpc2VkLCBCcmlnaHRuZXNzU29sdXRpb25fc3RhdGljX2luaXQpOwoJQ0hFQ0tfTlVMTChz
dG9yZWRfbWF4ZmlsZSwgIk1heGZpbGUgd2FzIG5vdCBsb2FkZWQiLCApOwoJbWF4X3J1bl90ICpy
dW4gPSBCcmlnaHRuZXNzU29sdXRpb25fbm9uYmxvY2socGFyYW1fTiwgaW5zY2FsYXJfQnJpZ2h0
bmVzc1NvbHV0aW9uS2VybmVsX0JyaWdodG5lc3NTb2x1dGlvbkFkanVzdCwgaW5zdHJlYW1faW5J
bWFnZSwgb3V0c3RyZWFtX291dEltYWdlKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1
biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCm1heF9ydW5fdCAqQnJpZ2h0bmVzc1Nv
bHV0aW9uX25vbmJsb2NrKAoJaW50MzJfdCBwYXJhbV9OLAoJdWludDY0X3QgaW5zY2FsYXJfQnJp
Z2h0bmVzc1NvbHV0aW9uS2VybmVsX0JyaWdodG5lc3NTb2x1dGlvbkFkanVzdCwKCWNvbnN0IGlu
dDMyX3QgKmluc3RyZWFtX2luSW1hZ2UsCglpbnQzMl90ICpvdXRzdHJlYW1fb3V0SW1hZ2UpCnsK
CUJyaWdodG5lc3NTb2x1dGlvbl9hY3Rpb25zX3QgaW50ZXJmYWNlX2FjdGlvbnM7CglpbnRlcmZh
Y2VfYWN0aW9ucy5wYXJhbV9OID0gcGFyYW1fTjsKCWludGVyZmFjZV9hY3Rpb25zLmluc2NhbGFy
X0JyaWdodG5lc3NTb2x1dGlvbktlcm5lbF9CcmlnaHRuZXNzU29sdXRpb25BZGp1c3QgPSBpbnNj
YWxhcl9CcmlnaHRuZXNzU29sdXRpb25LZXJuZWxfQnJpZ2h0bmVzc1NvbHV0aW9uQWRqdXN0OwoJ
aW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1faW5JbWFnZSA9IGluc3RyZWFtX2luSW1hZ2U7Cglp
bnRlcmZhY2VfYWN0aW9ucy5vdXRzdHJlYW1fb3V0SW1hZ2UgPSBvdXRzdHJlYW1fb3V0SW1hZ2U7
Cgkodm9pZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxpc2VkLCBCcmlnaHRuZXNz
U29sdXRpb25fc3RhdGljX2luaXQpOwoJQ0hFQ0tfTlVMTChzdG9yZWRfbWF4ZmlsZSwgIk1heGZp
bGUgd2FzIG5vdCBsb2FkZWQiLCBOVUxMKTsKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxM
OwoJdm9pZCAgKmNiX2RhdGEgICAgICAgICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25z
ID0gQnJpZ2h0bmVzc1NvbHV0aW9uX2NvbnZlcnRfaW50ZXJuYWwoc3RvcmVkX21heGZpbGUsICZp
bnRlcmZhY2VfYWN0aW9ucywgMSwgJmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX05VTEwoYWN0
aW9ucywgIlVuYWJsZSB0byBidWlsZCBhY3Rpb25zIiwgTlVMTCk7CgltYXhfdmFsaWRhdGUoYWN0
aW9ucyk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CglDSEVDS19FUlJPUlNfU1Qo
c3RvcmVkX2VuZ2luZSwgTlVMTCk7CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5V
TEwpIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrKHN0b3JlZF9lbmdpbmUsIGFjdGlvbnMpOwoJ
fSBlbHNlIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrX3dpdGhfY2Ioc3RvcmVkX2VuZ2luZSwg
YWN0aW9ucywgY2JfZnVuYywgY2JfZGF0YSk7Cgl9CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0
byBydW4gYWN0aW9ucyIsIE5VTEwpOwoJQ0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJ
bWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCnZvaWQgQnJpZ2h0bmVz
c1NvbHV0aW9uX3J1bigKCW1heF9lbmdpbmVfdCAqZW5naW5lLAoJQnJpZ2h0bmVzc1NvbHV0aW9u
X2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9ydW5fdCAqcnVuID0gQnJpZ2h0
bmVzc1NvbHV0aW9uX3J1bl9ub25ibG9jayhlbmdpbmUsIGludGVyZmFjZV9hY3Rpb25zKTsKCUNI
RUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7
Cn0KCm1heF9ydW5fdCAqQnJpZ2h0bmVzc1NvbHV0aW9uX3J1bl9ub25ibG9jaygKCW1heF9lbmdp
bmVfdCAqZW5naW5lLAoJQnJpZ2h0bmVzc1NvbHV0aW9uX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2Fj
dGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5naW5lX2dldF9tYXhfZmlsZShl
bmdpbmUpOyAKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxMOwoJdm9pZCAgKmNiX2RhdGEg
ICAgICAgICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gQnJpZ2h0bmVzc1NvbHV0
aW9uX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsICZjYl9m
dW5jLCAmY2JfZGF0YSk7CglDSEVDS19OVUxMKGFjdGlvbnMsICJVbmFibGUgdG8gYnVpbGQgYWN0
aW9ucyIsIE5VTEwpOwoJbWF4X3ZhbGlkYXRlKGFjdGlvbnMpOwoJQ0hFQ0tfRVJST1JTX1NUKGFj
dGlvbnMsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47CglpZiAoY2JfZnVuYyA9PSBOVUxMKSB7CgkJ
cnVuID0gbWF4X3J1bl9ub25ibG9jayhlbmdpbmUsIGFjdGlvbnMpOwoJfSBlbHNlIHsKCQlydW4g
PSBtYXhfcnVuX25vbmJsb2NrX3dpdGhfY2IoZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9k
YXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7
CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJp
ZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAn
ZGVmYXVsdCcuCiAqIAogKiBccGFyYW0gW2luXSBncm91cCBHcm91cCB0byB1c2UuCiAqIFxwYXJh
bSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRo
ZSBhY3Rpb25zIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cC4KICov
CnZvaWQgQnJpZ2h0bmVzc1NvbHV0aW9uX3J1bl9ncm91cChtYXhfZ3JvdXBfdCAqZ3JvdXAsIEJy
aWdodG5lc3NTb2x1dGlvbl9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVu
X3QgKnJ1biA9IEJyaWdodG5lc3NTb2x1dGlvbl9ydW5fZ3JvdXBfbm9uYmxvY2soZ3JvdXAsIGlu
dGVyZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25z
IiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJyaWVmIEdyb3VwIHJ1biBhZHZhbmNl
ZCBzdGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0
Jy4KICogCiAqCiAqIFNjaGVkdWxlIHRoZSBhY3Rpb25zIHRvIHJ1biBvbiB0aGUgZmlyc3QgZGV2
aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JvdXAgYW5kIHJldHVybiBpbW1lZGlhdGVseS4KICogVGhl
IHN0YXR1cyBvZiB0aGUgcnVuIG11c3QgYmUgY2hlY2tlZCB3aXRoIDo6bWF4X3dhaXQuIAogKiBO
b3RlIHRoYXQgdXNlIG9mIDo6bWF4X25vd2FpdCBpcyBwcm9oaWJpdGVkIHdpdGggbm9uLWJsb2Nr
aW5nIHJ1bm5pbmcgb24gZ3JvdXBzOgogKiBzZWUgdGhlIDo6bWF4X3J1bl9ncm91cF9ub25ibG9j
ayBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGV4cGxhbmF0aW9uLgogKgogKiBccGFyYW0gW2luXSBn
cm91cCBHcm91cCB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIEFjdGlv
bnMgdG8gcnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9m
IHRoZSBhY3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKkJy
aWdodG5lc3NTb2x1dGlvbl9ydW5fZ3JvdXBfbm9uYmxvY2sobWF4X2dyb3VwX3QgKmdyb3VwLCBC
cmlnaHRuZXNzU29sdXRpb25fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2Zp
bGVfdCAqbWF4ZmlsZSA9IG1heF9ncm91cF9nZXRfbWF4X2ZpbGUoZ3JvdXApOwoJbWF4X2FjdGlv
bnNfdCAqYWN0aW9ucyA9IEJyaWdodG5lc3NTb2x1dGlvbl9jb252ZXJ0X2ludGVybmFsKG1heGZp
bGUsIGludGVyZmFjZV9hY3Rpb25zLCAxLCBOVUxMLCBOVUxMKTsKCWlmKGFjdGlvbnMgPT0gTlVM
TCkgcmV0dXJuIE5VTEw7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxM
OwoJbWF4X3ZhbGlkYXRlKGFjdGlvbnMpOwoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2dyb3Vw
X25vbmJsb2NrKGdyb3VwLCBhY3Rpb25zKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7Cgly
ZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQgc3RhdGljIGZ1
bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqIFxwYXJhbSBbaW5dIGVu
Z2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGlu
dGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRo
ZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLiAgVGhlIGxlbmd0aCBv
ZiBpbnRlcmZhY2VfYWN0aW9ucwogKiBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5Lgog
Ki8Kdm9pZCBCcmlnaHRuZXNzU29sdXRpb25fcnVuX2FycmF5KG1heF9lbmdhcnJheV90ICplbmdh
cnJheSwgQnJpZ2h0bmVzc1NvbHV0aW9uX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkK
ewoJbWF4X3J1bl90ICpydW4gPSBCcmlnaHRuZXNzU29sdXRpb25fcnVuX2FycmF5X25vbmJsb2Nr
KGVuZ2FycmF5LCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0
byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAqIFxicmllZiBBcnJh
eSBydW4gYWR2YW5jZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVy
ZmFjZSAnZGVmYXVsdCcuCiAqIAogKgogKiBTY2hlZHVsZSB0byBydW4gdGhlIGFycmF5IG9mIGFj
dGlvbnMgb24gdGhlIGFycmF5IG9mIGVuZ2luZXMsIGFuZCByZXR1cm4gaW1tZWRpYXRlbHkuCiAq
IFRoZSBsZW5ndGggb2YgaW50ZXJmYWNlX2FjdGlvbnMgbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBl
bmdhcnJheS4KICogVGhlIHN0YXR1cyBvZiB0aGUgcnVuIGNhbiBiZSBjaGVja2VkIGVpdGhlciBi
eSA6Om1heF93YWl0IG9yIDo6bWF4X25vd2FpdDsKICogbm90ZSB0aGF0IG9uZSBvZiB0aGVzZSAq
bXVzdCogYmUgY2FsbGVkLCBzbyB0aGF0IGFzc29jaWF0ZWQgbWVtb3J5IGNhbiBiZSByZWxlYXNl
ZC4KICoKICogXHBhcmFtIFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNl
LgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0
byBydW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhl
IGFjdGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9ydW5fdCAqQnJpZ2h0
bmVzc1NvbHV0aW9uX3J1bl9hcnJheV9ub25ibG9jayhtYXhfZW5nYXJyYXlfdCAqZW5nYXJyYXks
IEJyaWdodG5lc3NTb2x1dGlvbl9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1h
eF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5nYXJyYXlfZ2V0X21heF9maWxlKGVuZ2FycmF5LCAw
KTsKCWludCBpOwoJbWF4X2FjdGFycmF5X3QgKmFjdGFycmF5ID0gbWF4X2FjdGFycmF5X2luaXQo
bWF4ZmlsZSwgZW5nYXJyYXktPnNpemUpOwoJaWYgKGFjdGFycmF5ID09IE5VTEwpIHJldHVybiBO
VUxMOwoJbWF4X2FjdGlvbnNfdCAqKmFycl9hY3Rpb25zID0gbWFsbG9jKGVuZ2FycmF5LT5zaXpl
ICogc2l6ZW9mKG1heF9hY3Rpb25zX3QqKSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+
c2l6ZTsgaSsrICkgewoJCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBCcmlnaHRuZXNzU29sdXRp
b25fY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9uc1tpXSwgMSwgTlVM
TCwgTlVMTCk7CgkJaWYgKGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CgkJYXJyX2FjdGlv
bnNbaV0gPSBhY3Rpb25zOwoJCW1heF9zZXRfYWN0aW9uKGFjdGFycmF5LCBpLCBhY3Rpb25zKTsK
CX0KCW1heF9ydW5fdCAqcnVuID0gbWF4X3J1bl9hcnJheV9ub25ibG9jayhlbmdhcnJheSwgYWN0
YXJyYXkpOwoJZm9yICggaSA9IDAgOyBpIDwgYWN0YXJyYXktPnNpemUgOyBpKysgKSB7IG1heF9h
Y3Rpb25zX2ZyZWUoYXJyX2FjdGlvbnNbaV0pOyB9CgltYXhfYWN0YXJyYXlfZnJlZShhY3RhcnJh
eSk7CglmcmVlKGFycl9hY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIENv
bnZlcnRzIGEgc3RhdGljLWludGVyZmFjZSBhY3Rpb24gc3RydWN0IGludG8gYSBkeW5hbWljLWlu
dGVyZmFjZSBtYXhfYWN0aW9uc190IHN0cnVjdC4KICoKICogTm90ZSB0aGF0IHRoaXMgaXMgYW4g
aW50ZXJuYWwgdXRpbGl0eSBmdW5jdGlvbiB1c2VkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGUg
c3RhdGljIGludGVyZmFjZS4KICoKICogXHBhcmFtIFtpbl0gbWF4ZmlsZSBUaGUgbWF4ZmlsZSB0
byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIFRoZSBpbnRlcmZhY2Utc3Bl
Y2lmaWMgYWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gVGhlIGR5bmFtaWMtaW50ZXJmYWNlIGFj
dGlvbnMgdG8gcnVuLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfYWN0aW9uc190
KiBCcmlnaHRuZXNzU29sdXRpb25fY29udmVydChtYXhfZmlsZV90ICptYXhmaWxlLCBCcmlnaHRu
ZXNzU29sdXRpb25fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJcmV0dXJuIEJyaWdo
dG5lc3NTb2x1dGlvbl9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25z
LCAwLCBOVUxMLCBOVUxMKTsKfQoKI3VuZGVmIENIRUNLX0VSUk9SU19TVAojdW5kZWYgQ0hFQ0tf
TlVMTAoKCg==
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 7, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessSolutionKernel, 19, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c0214252a012b8782e030a55b68d6fadc443a5933e3a4021415b1ea324122eb7c367beae224769a5d4422b4c6")
#endif

